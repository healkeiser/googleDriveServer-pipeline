<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="qLib" label="qLib">
    <memberTool name="qLib::AccessShotNode"/>
    <memberTool name="qLib::ToggleViewportBackgroundColor"/>
    <memberTool name="qLib::camera_dolly_zoom_ql"/>
    <memberTool name="qLib::ToggleViewportTemplates"/>
    <memberTool name="qLib::ToggleViewportGuides"/>
    <memberTool name="qLib::ReferenceCopy"/>
    <memberTool name="qLib::ToggleTimeDependencyDisplay"/>
    <memberTool name="qLib::ColorByAuthor"/>
    <memberTool name="qLib::AddStickyNote"/>
    <memberTool name="qLib::ResizeStickyNotes"/>
    <memberTool name="qLib::AddStash"/>
    <memberTool name="qLib::ToggleIntegerFrames"/>
    <memberTool name="qLib::CrashRecovery"/>
  </toolshelf>

  <tool name="qLib::AccessShotNode" label="::shot::" icon="NETWORKS_scene">
    <helpText><![CDATA[#icon: NETWORKS/scene
#context: obj
#type: tool

= Access: Shot Node qL =

*version 1*

"""Opens a floating parameter panel for scene Shot qL node(s).
---
LMB: All Shot and Environment nodes.
Shift-LMB: Only "active" Shot(s) (visible/selectable).
Alt-LMB: Environment nodes only.
"""

@bugs Limitations

- ...


@relnotes Release Notes

_version 1_ ---

2014-10-12:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils


def show_parms(ops, title="Parameters", kwargs=None):
    """."""
    PT = hou.paneTabType.Parm
    P = None
    t = None

    for op in ops:
        if P is None:
            P = hou.ui.curDesktop().createFloatingPanel(PT)
            P.setName(title)
            t = P.panes()[0].tabs()[0]
        else:
            t = P.panes()[0].createTab(PT)

        if t:
            t.setPin(True)
            t.setCurrentNode(op)

    return P



ctrl = kwargs['ctrlclick']
shift = kwargs['shiftclick']
alt = kwargs['altclick']

is_shot = lambda n: 'qLib::shot_ql' in n.type().name()
is_env = lambda n: 'qLib::environment_ql' in n.type().name()

# find all Shot qL OPs first
#
shots = [ c for c in hou.node('/').allSubChildren()
    if is_shot(c) or is_env(c) ]

if shift or ctrl:
    shots = [ n for n in shots if n.isSelectableInViewport() or n.isDisplayFlagSet() ]

if alt:
    shots = [ n for n in shots if is_env(n) ]

shots = sorted(shots,
    key=lambda n: '%s %d %d %s' % (n.type().name(),
        n.isSelectableInViewport(),
        n.isDisplayFlagSet(),
        n.name(), )
    )

show_parms(shots, title="Scene Global(s)", kwargs=kwargs)

]]></script>
  </tool>

  <tool name="qLib::ToggleViewportBackgroundColor" label="/backgnd/" icon="COP2_invert">
    <helpText><![CDATA[#icon: COP2/invert
#context: obj
#type: tool

= Cycle Viewport Background Color qL =

*version 1*

"""Cycles between viewport color schemes (dark, grey, light).
---
LMB: Cycle background color.
Ctrl-LMB: Reset to black.
Shift-LMB: Reset to grey.
"""

@bugs Limitations

- It might not seem to work for the first time (try clicking again, then)


@relnotes Release Notes

_version 1_ ---

2015-02-24:
    - Added dark/grey/light cycle (H14)

2014-02-14:
    - First version (in qLib).
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

bg = None

try:
    # cycle next bg
    if kwargs['ctrlclick']: raise
    bgs = hou.session.bg[:]
    bgs = bgs[1:]+bgs[:1]
    if kwargs['shiftclick']: bgs = ['bw', 'light', 'wb']
    bg = bgs[0]
    hou.session.bg = bgs
except:
    # set up default bg vars
    hou.session.bg = ['wb', 'bw', 'light']
    bg = hou.session.bg[0]

bgs = { 'wb':'dark', 'bw':'grey', 'light':'light' }

hou.hscript("viewdisplay -B %s *" % bg)
msg = "Cycled background to %s" % bgs[bg].upper()
hou.ui.setStatusMessage(msg)
]]></script>
  </tool>

  <tool name="qLib::ToggleIntegerFrames" label="int.frames" icon="PLAYBAR_editable_keys">
    <helpText><![CDATA[#icon: PLAYBAR/editable_keys
#context: obj
#type: tool

= Toggle Integer Frames qL =

*version 1*

"""Toggle non-integer frame values on the playbar.
---
LMB: Toggle non-integer frames.
Shift-LMB: Switch to integer frames.
"""

@usage Usage

- ((LMB)):
    Toggle non-integer frames
- ((Shift + LMB)):
    Switch to integer frames


_version 1_ ---

2018-07-22:
    - Added shift-click option
    - Improved help page]]></helpText>
    <script scriptType="python"><![CDATA[import hou

shift = kwargs['shiftclick']

fr = hou.playbar.frameRange()
pr = hou.playbar.playbackRange()

m = not hou.playbar.usesIntegerFrames()
if shift:
    m = True
hou.playbar.setUseIntegerFrames(m)

hou.playbar.setFrameRange(fr[0], fr[1])
hou.playbar.setPlaybackRange(pr[0], pr[1])

hou.ui.setStatusMessage(" ---- Using Integer Frames: %s" % ("ON" if m else "OFF"))
]]></script>
  </tool>

  <tool name="qLib::ReferenceCopy" label="Ref Copy qL" icon="BUTTONS_copy">
    <helpText><![CDATA[#icon: BUTTONS/copy
#context: obj
#type: tool

= Reference Copy qL =

*version 1*

"""Creates a Reference Copy where the reference source is easy to replace.
---
LMB: Create reference copy with a single link to the source node.
Alt-LMB: Use relative path for source node.
"""

This function is the same as the original _Reference Copy_ operation,
but it adds an extra parameter that specifies the source operator name
where all parameter values are referenced from.

This way the reference source is easy to change.


@usage Using Reference Copy

Select node(s) and click the shelf button.


@relnotes Release Notes

_version 1_ ---

2015-01-16:
    - Added workaround for "assets with editable subnets can't be reference copied" issue
      (works with qLib nodes only)

2014-04-05:
    - Added Alt+LMB mode (creates relative path for reference source)

2014-02-14:
    - Fixed serious bug (worked properly only on frame 1)
    - Uses `chsop()` now to get OP paths

2013-03-10:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[# do the dunno
#
import hou
import re

def postproc_refcopy(nodepath, srcpath):
    N = hou.node(nodepath)

    if N:

        # add ref_source parameter
        #
        N.addSpareParmTuple(
            hou.StringParmTemplate(
                "ref_source", "Ref Source", 1,
                string_type=hou.stringParmType.NodeReference
            )
        )

        N.parm('ref_source').set(srcpath)

        # process linkage expressions
        #
        parms = N.parms()
        for p in parms:
            try:
                if not p.parmTemplate().isHidden(): # skip hidden parms, e.g. description labels
                    for k in p.keyframes():
                        x = k.expression()
                        x = re.sub('"\.\./[^/]+', 'chsop("ref_source")+"', x)
                        k.setExpression(x, hou.exprLanguage.Hscript)
                        p.setKeyframe(k)

            except Exception as e:
                print("failed for param '%s'" % p.name())

        # store typename of the creator tool
        #
        hou.hscript("opuserdata -n '___toolcount___' -v '%s' %s" % ('1', nodepath, ))
        hou.hscript("opuserdata -n '___toolid___' -v '%s' %s" % ('ReferenceCopy_qL', nodepath, ))


def fixum(node, mode):
    '''Workaround for the "assets with editable subnets cannot be reference copied" issue.'''
    try:
        n = hou.node(node)
        t = n.type()
        d = t.definition()

        tn = t.name()
        # hackish workaround: apply to all qLib nodes
        #
        if 'qLib::' in tn and '_ql' in tn:
            #print("(applying %s to %s)" % (mode, n.path(), ))

            if mode=='open':
                n.allowEditingOfContents()
                pass

            if mode=='close':
                n.matchCurrentDefinition()
                pass
        else:
            #print "(skipping %s)" % (n.path(), )
            pass
    except:
        print("oops #1")
        pass

# main
#
sel = [ n.path() for n in hou.selectedNodes() ]

alt = kwargs['shiftclick'] or kwargs['altclick'] or kwargs['ctrlclick']

copies = []

for S in sel:
    c = len( hou.hscript( 'opls -d %s*' % S )[0].split() )
    T = '%s_copy%d' % (S, c)

    try:
        fixum(S, 'open') # "Allow Editing of Contents" for S
        hou.hscript('opcp -c %s %s' % (S, T))
        fixum(S, 'close') # "Match Current Definition" for S and T
        fixum(T, 'close')
    except:
        print("oops #2, %s" % S)
        pass

    if True:
        srcpath = S
        if alt:
            srcpath = hou.node(T).relativePathTo(hou.node(S))
        postproc_refcopy(T, srcpath)
        copies.append(T)

if len(copies)>0:
    hou.clearAllSelected()
    for c in copies:
        hou.node(c).setSelected(True)
]]></script>
  </tool>

  <tool name="qLib::ToggleViewportTemplates" label="/templates/" icon="NODEFLAGS_template">
    <helpText><![CDATA[#icon: NODEFLAGS/template
#context: obj
#type: tool

= Toggle Viewport Templates qL =

*version 1*

"""Toggles template geometry display in viewports.
---
LMB: Toggle template display.
Shift-LMB: Enable template display.
Ctrl-LMB: Clear display template flag on all (S)OPs.
"""

@usage Usage

- ((LMB)):
    Toggles template display (Display Options -> Guides -> Templated geometry, Selectable templates)
- ((Shift + LMB)):
    Enable template display
- ((Ctrl + LMB)):
    Clears template flag on all (S)OPs within the currently displayed container


@related
    - ...

]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

v = toolutils.sceneViewer()
e = None
try:
    e = toolutils.networkEditor()
except:
    pass

if ctrl:
    n = v.pwd() # container node
    ts = 0

    for c in n.children():
        try:
            if c.isTemplateFlagSet() or c.isSelectableTemplateFlagSet():
                ts += 1
            c.setTemplateFlag(0)
            c.setSelectableTemplateFlag(0)
        except:
            pass

    msg = "CLEARED all Display Template flags (%d nodes)" % ts
    hou.ui.setStatusMessage(msg)
    v.clearPromptMessage()
    v.setPromptMessage(msg, hou.promptMessageType.Warning)
    if e:
        e.flashMessage("NODEFLAGS_template", msg, 8)

else:
    if not hasattr(hou.session, "templates"):
        hou.session.templates = True

    hou.session.templates = not hou.session.templates

    if shift: hou.session.templates = True

    t = 'on' if hou.session.templates else 'off'
    hou.hscript("viewdisplay -T %s -i %s *" % (t, t, ))
    msg = "Templates are now %s" % ("DISPLAYED" if hou.session.templates else "OFF")
    hou.ui.setStatusMessage(msg)
    v.clearPromptMessage()
    v.setPromptMessage(msg, hou.promptMessageType.Warning)
    if e:
        e.flashMessage("NODEFLAGS_template", msg, 8)
]]></script>
  </tool>

  <tool name="qLib::ToggleViewportGuides" label="/guides/" icon="NODEFLAGS_origin">
    <helpText><![CDATA[#icon: IMAGE/view_guides
#context: obj
#type: tool

= Toggle Viewport Guides qL =

*version 1*

"""Toggles OP guide display in the viewports.
---
LMB: Toggle guide display.
Shift-LMB: Enable guide display.
"""

@usage Usage

- ((LMB)):
    Toggles guides display (Display Options -> Guides -> Node guides)
- ((Shift + LMB)):
    Enable guides display

@bugs Limitations

- It might behave inconsistently between viewports (and needs to be clicked twice)


@relnotes Release Notes

_version 1_ ---

2018-07-22:
    - Added shift-click option
    - Improved help page

2014-03-20:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

shift = kwargs['shiftclick']

v = toolutils.sceneViewer()

w = "%s.%s.world" % \
        (v.pane().desktop().name(), \
        v.name() )
#print "view:", w

if not hasattr(hou.session, "guides"):
    hou.session.guides = True

if shift:
    hou.session.guides = False

hou.session.guides = not hou.session.guides
#hou.hscript("viewdisplay -g %s %s" % ("on" if hou.session.guides else "off", w, ))
hou.hscript("viewdisplay -g %s *" % ("on" if hou.session.guides else "off", ))
msg = "Geometry guides are now %s" % ("DISPLAYED" if hou.session.guides else "OFF")
hou.ui.setStatusMessage(msg)
v.clearPromptMessage()
v.setPromptMessage(msg, hou.promptMessageType.Warning)
]]></script>
  </tool>

  <tool name="qLib::ToggleTimeDependencyDisplay" label="/time dep/" icon="NETVIEW_time_dependent_badge_large">
    <helpText><![CDATA[#icon: NETVIEW/time_dependent_badge_large
#context: obj
#type: tool

= Toggle Time Dependency Display qL =

*version 1*

"""Toggles time dependency badge display in all network editors.
---
LMB: Toggle time dependency display (between normal and large).
Shift-LMB: Turn on (large).
Ctrl-LMB: Turn off (hide).
"""

@usage Usage

- ((LMB)):
    Toggle time dependency display
- ((Shift + LMB)):
    Turn on display
- ((Ctrl + LMB)):
    Turn off display

@bugs Limitations

- It's for H16.5 or higher (but should work in H16)


@relnotes Release Notes

_version 1_ ---

2018-07-22:
    - Added shift/ctrl-click functions

2018-05-27:
    - First version.
]]></helpText>
    <script scriptType="python"><![CDATA[# toggle time-dependency display in network editor(s)
# in H16.5 the relevant preference is called "badgetimedep", which can be set to "hide", "normal" or "large". "showtimedep" is no longer used

import toolutils

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']

D = 'badgetimedep'
ns = [ t for t in hou.ui.paneTabs() if type(t) is hou.NetworkEditor ]

try:
    e = toolutils.networkEditor()
    b = ns[0].getPref(D)
    b = 'normal' if b=='large' else 'large'
    
    if shift:
        b = 'large'
    if ctrl:
        b = 'hide'
    
    for n in ns:
        n.setPref('showtimedep', '1') # make it compatible w/ 16.0
        n.setPref(D, b) # use the 16.5+ way

    msg = "Time-Dependent Badges: %s" % b.capitalize()
    hou.ui.setStatusMessage(msg)
    e.flashMessage("NETVIEW_time_dependent_badge_large", msg, 3.0)

except:
    hou.ui.setStatusMessage("Couldn't toggle time-dependency badge", hou.severityType.Warning)]]></script>
  </tool>

  <tool name="qLib::ColorByAuthor" label="/color by author/" icon="COP2_mosaic">
    <helpText><![CDATA[#icon: COP2/mosaic
#type: tool

= Color by Author qL =

*version 1*

"""Color nodes in a network based on their authors.
Select node(s) in the network editor to specify network.
---
LMB: Apply coloring by author.
Shift-LMB: Restore original colors (requires node selection!)
"""

Select node(s) in a network to specify network.
All nodes from the authors of selected nodes will he highlighted.

Use ((Shift + LMB)) to restore original colors.

WARNING:
    Coloring of the network will change per-node modification
    dates. It's recommended to restore original colors by
    *undoing* this operation.

NOTE:
    You still have to select a node to specify the network
    where colors need to be restored.

@usage Usage

- ((LMB)):
    Apply color by node author
- ((Shift + LMB)):
    Restore original node colors
]]></helpText>
    <script scriptType="python"><![CDATA[# color-code nodes based on author names
#

import toolutils
import colorsys
import re
import json

def restore_node_visu(node):
    '''Restore previous color (comment etc) on a node.'''

    has_data = lambda name: name in node.userDataDict()
    data = node.userData

    if has_data('color'):
        node.setColor(hou.Color(json.loads(data('color'))))
        node.destroyUserData('color')

    if has_data('comment'):
        node.setComment(data('comment'))
        node.destroyUserData('comment')

    if has_data('showcomment'):
        hou.hscript('opset -Y %s %s' % (data('showcomment'), node.path(), ))
        node.destroyUserData('showcomment')


def save_node_visu(node):
    '''Save (or resave) original node color/comment.'''
    restore_node_visu(node)
    # userData is string only so we just dump it as a json string
    node.setUserData('color', json.dumps(node.color().rgb()))
    node.setUserData('comment', node.comment())

    try:
        flags = hou.hscript('opset %s' % node.path())[0]
        flags = re.search('-Y [^ ]+', flags).group(0) # might throw here
        showcom = flags.replace('-Y ', '')
        node.setUserData('showcomment', showcom)
    except:
        pass # worst case, we're not storing this flag


def set_node_visu(node, color=None, comment=None):
    '''Set color/comment of a node. Should be used after visu is saved on a node.'''
    if color:
        node.setColor(hou.Color(color))
    if comment:
        toolid = node.userData("___toolid___")
        if toolid:
            comment = "%s\n(toolid: %s)" % (comment, toolid, )
        node.setComment(comment)
        # turn on "show comment in network view"
        hou.hscript('opset -Y on %s' % node.path())



def get_node_author(node):
    '''Get name of author of a node.'''
    author = '???'
    try:
        # digging up author info from an archaic command
        author = hou.hscript('opstat -u %s' % node.path())[0].split(' ')[-1].split('\n')[0]
    except:
        pass # we can't hack the info out, just return '???'
    return author


# main function
#
restore_mode = kwargs['shiftclick']
sel = hou.selectedNodes()

nodeauths = {} # 'nodename': 'author' dict
authcolors = {} # 'author': color (3 floats tuple) dict
authors = set() # author names

if len(sel)>0:

    netw = sel[0].parent()
    hilite_authors = [ get_node_author(n) for n in sel ]
    hilite_authors = list(set(hilite_authors))
    
    # collect author names
    #
    for c in netw.children():
        a = get_node_author(c)
        authors.add(a)
        nodeauths[c.name()] = a
    
    authors = list(authors)
    
    # generate unique colors for authors
    #
    for i in range(len(authors)):
        author = authors[i]
        hue = float(i) / len(authors)
        val = 0.6 if i%2==0 else 0.5
        authcolors[author] = colorsys.hsv_to_rgb(hue, 0.5, val)

    # apply colors
    #
    func = restore_node_visu if restore_mode else save_node_visu
    for c in netw.children():
        func(c)

    if not restore_mode:
        for c in netw.children():
            author = nodeauths[c.name()]
            color = authcolors[author]
            set_node_visu(c, color=color, comment=author)
            if author in hilite_authors:
                c.setSelected(True)
        try:
            toolutils.networkEditor().flashMessage("COP2_mosaic",
                "Nodes colored by author (selected: %s) (UNDO recommended to restore colors)" % " ".join(hilite_authors), 8.0)
            hou.ui.setStatusMessage("Nodes colored by author. Selected nodes by:  %s" % ", ".join(hilite_authors) )
        except:
            pass
else:
    hou.ui.setStatusMessage("Select node(s) to specify network to color (shift-click to restore)", hou.severityType.Warning)

#
]]></script>
  </tool>

  <tool name="qLib::CrashRecovery" label="::recover::" icon="MISC_satchel">
    <helpText><![CDATA[#icon: MISC/satchel
#type: tool

= Crash Recovery qL =

*version 1*

"""Opens the crash recovery window to load crash recovery hip files.
"""


]]></helpText>
    <script scriptType="python"><![CDATA[import qlibutils

qlibutils.do_crash_recovery(calledFromUI=True)

]]></script>
  </tool>

  <tool name="qLib::camera_dolly_zoom_ql" label="dolly/zoom" icon="OBJ_camera">
    <helpText><![CDATA[#icon: OBJ/camera
#type: tool

= Camera Dolly/Zoom qL =

*version 1*

"""Switches to the dolly/zoom ('vertigo') camera viewport state (H17.5+).
---
LMB: Dolly/Zoom ("Vertigo").
MMB: Focal Length Zoom.
RMB: Dolly.
SPACE: Regular viewport navigation.
"""
]]></helpText>
    <script scriptType="python"><![CDATA[import qlibutils

v = qlibutils.houVersionAsFloat()

if v>=17.5:
    try:
        import stateutils
        viewer = stateutils.findSceneViewer()
        # this is: obj, sop, dop
        t = viewer.pwd().childTypeCategory().name().lower()[:3]
        type = "qLib::camera_zoom_vertigo_ql_%s" % t

        # do some proper checking if the state exists
        try:
            viewer.setCurrentState(type)
        except:
            pass
    except:
        pass
else:
    hou.ui.displayMessage("This requires Houdini 17.5 or higher")
]]></script>
  </tool>

  <tool name="qLib::ResizeStickyNotes" label="- /note/ +" icon="IMAGE_zoom_in">
    <helpText><![CDATA[#icon: IMAGE/zoom_in
#type: tool

= Grow/Shrink Sticky Notes qL =

*version 1*

"""Increases/decreases the size of selected sticky notes.
---
LMB: Increase sticky note size
Shift-LMB: Decrease sticky note size
Ctrl-LMB: Reset size to default
"""

Select sticky note(s) to resize. Use one of the following ways to resize:

- ((LMB)) to increase sticky note (and font) size
- ((Shift + LMB)) to decrease note size
- ((Ctrl + LMB)) to reset to default size]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

notes = [ n for n in hou.selectedItems() if type(n)==hou.StickyNote ]

m = 2.0

if shift or alt:
    m = 1.0/m;

for n in notes:

    ts = n.textSize()
    if ts==0: ts=0.225
    
    if ctrl:
        m = 0.225/ts;

    n.setSize( n.size()*m )
    n.setTextSize( ts*m )

]]></script>
  </tool>

  <tool name="qLib::AddStickyNote" label="Sticky Note" icon="BUTTONS_network_sticky">
    <helpText><![CDATA[#icon: BUTTONS/network_sticky
#type: tool

= Add Sticky Note qL =

*version 1*

"""Creates a sticky note, adds it next to the selected node, or update selected sticky notes.
"""

This shelf button creates or updates sticky notes. Sticky notes will have a header
containing the user name and the current date.

Supported keyboard modifiers:
- ((LMB)) to create/add/update sticky notes
- ((Shift + LMB)) to use "username@hostname" unstead of plain user name
- ((Ctrl + LMB)) to remove headers from sticky notes

The tool performs different actions, based on the current selection --

If sticky note(s) are selected:
    Notes with existing header will be updated with current user name and date.
    Notes without a header will have the header added.
If a node is selected:
    A new sticky note will be added with the username/timestamp header. It
    will be placed next to the node, will mention the node name, and will inherit
    the node's color.
If nothing selected:
    A new sticky note with the username/timestamp header will be created.
]]></helpText>
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <toolSubmenu>qLib Shelf</toolSubmenu>
    <script scriptType="python"><![CDATA[import toolutils
import datetime
import getpass
import socket
import re

shift = kwargs['shiftclick']
ctrl  = kwargs['ctrlclick']
alt   = kwargs['altclick']

#print kwargs

# order to pick up current node context path --
# - parent of first selected node
# - kwargs['pane']
# - toolutils.networkEditor()

# get current pane
pane = kwargs['pane']
if not pane:
    pane = toolutils.networkEditor()

# first selected node
node = hou.selectedNodes()
node = node[0] if len(node)>0 else None

# any selected (existing) sticky notes (to be updated)
notes = [ n for n in hou.selectedItems() if type(n)==hou.StickyNote ]

# parent container for new sticky note
path = None
if node or len(notes):
    path = ( notes + [ node ] )[0].parent()
    #print "path 1:", path
elif pane:
    path = pane.pwd()
    #print "path 2:", path

#print "path:", path
#print "pane:", pane

date = datetime.datetime.now().replace(second=0, microsecond=0).isoformat(' ')
date = re.sub(":00$", "", date) # strip seconds
username = getpass.getuser()
hostname = socket.gethostname() # socket.getfqdn() gives full name
user = '%s@%s' % (username, hostname, ) if (shift or alt) else username
notename = "%s_%s_1" % (username, re.sub("[^0-9]+", "_", date), )
notetext = "[%s, %s]" % (user, date, )

#print "notename:", notename

if path:
    if len(notes):
        # has sticky notes selected? update them (or add timestamp)
        
        for note in notes:
        
            if not ctrl:
                t = note.text()
                t = re.sub("\[[^\]]+\]", notetext, t)
                if notetext not in t:
                    t = notetext+" -- \n"+t
                note.setText(t)
            else:
                # ctrl-click: remove header
                t = note.text()
                t = re.sub("\[[^\]]+\][ -]*[\n]*", "", t)
                note.setText(t)

        if pane:
            pane.flashMessage("BUTTONS_network_sticky", "Updated %d note(s)" % len(notes), 8)

    else:
        # nothing or regular node selected? create sticky note

        msg = "New sticky note:"
        if node:
            msg +=" for %s" % node.name()
        msg += " %s" % notetext

        note = path.createStickyNote(notename)
        notetext += " --\n"
        if node:
            notetext += "%s: " % node.name()
        notetext += "..."
        note.setText(notetext)
        s = note.size()
        note.setSize(hou.Vector2(s[0]*2.0, s[0]*0.5))
        hou.clearAllSelected()
        note.setSelected(True)

        if node:
            # move sticky next to node
            p = node.position()
            note.move(hou.Vector2(p.x()+2.0, p.y()-0.8, ))
            note.setColor(node.color())
        elif pane:
            # move sticky to pane center
            note.move(pane.visibleBounds().center())

        if pane:
            pane.flashMessage("BUTTONS_network_sticky", msg, 8)
else:
    hou.ui.setStatusMessage("Couldn't determine context for sticky note")
]]></script>
  </tool>

  <tool name="qLib::AddStash" label="stash" icon="SOP_stash">
    <helpText><![CDATA[#icon: SOP/stash
#type: tool

= Add Stash qL =

*version 1*

"""Add a Stash qL SOP to selected node(s), and stash them.
---
LMB: Add Stash qL SOP
Shift-LMB: Add Cache SOP
"""

This shelf button attaches a Stash qL SOP to the selected nodes, and
stash their results. Alternatively it can create Cache SOP nodes.

NOTE:
    Stash nodes will lock their stashed geometry which will be saved
    into the hip file. A single geometry is stored (no animation).
    
    Cache nodes will cache their inputs in memory (can be animated
    over a frame range) but it won't be saved in the hip file.

Supported keyboard modifiers:
- ((LMB)) to attach Stash qL SOPs to selected nodes
- ((Alt + LMB)) to attach Cache SOPs to selected nodes
]]></helpText>
    <script scriptType="python"><![CDATA[import toolutils
e = toolutils.networkEditor()

# get selected SOP nodes
#
sel = [ n for n in hou.selectedNodes() if type(n) is hou.SopNode ]
alt = kwargs['shiftclick'] or kwargs['altclick'] or kwargs['ctrlclick']

r = []

for s in sel:
    stash = s.createOutputNode("stash_ql" if not alt else "cache")
    if not alt:
        stash.parm("stashinput").pressButton()
    stash.move(hou.Vector2(1.0, 0.0))
    r.append(stash)

if len(r)>0:
    hou.clearAllSelected()
    for s in r:
        s.setSelected(True)
    if e:
        e.flashMessage("SOP_stash",
            "created %d %s SOP(s)" % (len(r), "Cache" if alt else "Stash", ),
            8.0)]]></script>
  </tool>
</shelfDocument>
