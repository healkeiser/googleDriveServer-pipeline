{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "layoutbrushfill", "icon": "SOP/layoutbrushfill", "tags": "layoutbrush", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Fill (layout brush)"], "extent": [0, 24]}, {"type": "summary", "indent": 0, "text": ["Lets you draw shapes and fill them with scattered assets."], "extent": [124, 189]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [16, 22], "body": [{"type": "para", "indent": 4, "text": ["This node is designed to customize the behavior of the ", {"scheme": "Node", "value": "/nodes/lop/layout", "type": "link", "text": ["Layout LOP"], "fullpath": "/nodes/lop/layout"}, ". See the ", {"scheme": "Node", "value": "/nodes/lop/layout", "type": "link", "text": ["help for Layout"], "fullpath": "/nodes/lop/layout"}, " for more information."], "extent": [43, 197]}], "container": true, "attrs": {"id": "see_layout"}}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [225, 237], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Brush"], "extent": [237, 250], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Mode"], "extent": [250, 257], "body": [{"type": "para", "indent": 4, "text": ["The kind of shape you draw in the viewer. When you finish drawing a shape, the brush fills it with assets, using the parameters on the ", {"type": "ui", "text": ["Scatter"]}, " tab."], "extent": [272, 429]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Grid"], "extent": [429, 439], "body": [{"type": "para", "indent": 8, "text": ["Click to place one corner of a rectangle, then drag to or click to place the adjacent corner, then click to place the opposite corner. "], "extent": [439, 584]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Circle"], "extent": [584, 596], "body": [{"type": "para", "indent": 8, "text": ["Press to place the center of a circle, and drag out to define the circle\u2019s radius."], "extent": [596, 688]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Lasso"], "extent": [688, 699], "body": [{"type": "para", "indent": 8, "text": ["Drag to draw the outline of a freeform shape."], "extent": [699, 754]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "mode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Snap to Input"], "extent": [754, 769], "body": [{"type": "para", "indent": 4, "text": ["When this is on, snap assets to the intersected surface using the ", {"type": "ui", "text": ["Up"]}, " direction below."], "extent": [791, 886]}], "container": true, "attrs": {"id": "snaptoinput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Up"], "extent": [886, 890], "body": [{"type": "para", "indent": 4, "text": ["Sets the up direction of assets created to fill the "], "extent": [908, 967]}], "container": true, "attrs": {"id": "brushup"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scatter"], "extent": [967, 981], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Coverage"], "extent": [981, 996], "body": [{"type": "para", "indent": 8, "text": ["This is a scale on the density set below."], "extent": [1019, 1070]}], "container": true, "attrs": {"id": "coverage"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Point Count Method"], "extent": [1070, 1094], "body": [{"type": "para", "indent": 8, "text": ["How to control the density of the scattered instances."], "extent": [1125, 1189]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["By Size"], "extent": [1189, 1206], "body": [{"type": "para", "indent": 12, "text": ["???"], "extent": [1206, 1223]}], "container": true}, {"type": "dt", "indent": 8, "text": ["By Density"], "extent": [1223, 1243], "body": [{"type": "para", "indent": 12, "text": ["???"], "extent": [1243, 1260]}], "container": true}, {"type": "dt", "indent": 8, "text": ["By Point Spacing"], "extent": [1260, 1286], "body": [{"type": "para", "indent": 12, "text": ["???"], "extent": [1286, 1303]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Number of Points"], "extent": [1303, 1329], "body": [{"type": "para", "indent": 12, "text": ["Randomly scatter a fixed number of points inside the fill shape."], "extent": [1329, 1407]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pointcountmethod"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": "orientation_tab", "container": true, "type": "h", "indent": 0, "text": ["Orientation"], "extent": [13942, 13978], "body": [{"type": "para", "indent": 0, "text": ["The parameters on this tab control attributes on the points that specify how to scale and orient the objects that will be copied/instanced onto the points, such as with ", {"scheme": "Node", "value": "/nodes/sop/copytopoints", "type": "link", "text": ["Copy to Points"], "fullpath": "/nodes/sop/copytopoints"}, "."], "extent": [13978, 14189]}, {"type": "para", "indent": 0, "text": ["The best way to use these parameters is to set up your copying/instancing network to copy the objects onto the points, then select this node and tweak the parameters, so you can see how they affect the copied/instanced objects."], "extent": [14189, 14418]}, {"level": 3, "type": "sep", "indent": 0, "text": [" Alignment "], "extent": [14418, 14436], "body": [{"type": "para", "indent": 4, "text": ["By default, Houdini expects instance geometry to be modeled so that the ", {"type": "q", "text": ["up"]}, " direction (for example, from the root of a tree to the top) is along the +Y axis, and the ", {"type": "q", "text": ["forward"]}, " direction (for example, from the back of a car to the front) is along the +Z axis. You can modify this using the parameters in the ", {"type": "q", "text": ["Alignment"]}, " group below."], "extent": [14436, 14775]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Normal Direction"], "extent": [14775, 14797], "body": [{"type": "para", "indent": 8, "text": ["The axis of the instanced objects to map onto the surface normal direction. The default is ", {"type": "q", "text": ["Y"]}, " (so instance geometry modeled with ", {"type": "q", "text": ["up"]}, " along +Y will ", {"type": "q", "text": ["stick up"]}, " from the surface)."], "extent": [14822, 15010]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["X"], "extent": [15010, 15021], "body": [{"type": "para", "indent": 12, "text": ["Maps the initial X direction to the oriented normals."], "extent": [15021, 15096]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Y"], "extent": [15096, 15107], "body": [{"type": "para", "indent": 12, "text": ["Maps the initial Y direction to the oriented normals."], "extent": [15107, 15182]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Z"], "extent": [15182, 15193], "body": [{"type": "para", "indent": 12, "text": ["Maps the initial Z direction to the oriented normals."], "extent": [15193, 15268]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom"], "extent": [15268, 15284], "body": [{"type": "para", "indent": 12, "text": ["Maps the direction specified by the ", {"type": "ui", "text": ["Custom Normal Vector"]}, " to the oriented normals."], "extent": [15284, 15383]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "initnormal"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Custom Normal Vector"], "extent": [15383, 15409], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Normal Direction"]}, " is ", {"type": "ui", "text": ["Custom"]}, ", the node will map this custom vector to the surface normal at each point."], "extent": [15440, 15564]}], "container": true, "attrs": {"id": "initnormalcustom"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Forward Direction"], "extent": [15564, 15587], "body": [{"type": "para", "indent": 8, "text": ["The axis of the instanced objects to map onto the ", {"type": "ui", "text": ["Target Forward Vector"]}, " below. This controls how the instanced geometry rotates around the surface normal direction. "], "extent": [15608, 15787]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["X"], "extent": [15787, 15798], "body": [{"type": "para", "indent": 12, "text": ["Aligns the X direction with the ", {"type": "ui", "text": ["Target Forward Vector"]}, "."], "extent": [15798, 15878]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Y"], "extent": [15878, 15889], "body": [{"type": "para", "indent": 12, "text": ["Aligns the Y direction with the ", {"type": "ui", "text": ["Target Forward Vector"]}, "."], "extent": [15889, 15969]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Z"], "extent": [15969, 15980], "body": [{"type": "para", "indent": 12, "text": ["Aligns the Z direction with the ", {"type": "ui", "text": ["Target Forward Vector"]}, "."], "extent": [15980, 16060]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom"], "extent": [16060, 16076], "body": [{"type": "para", "indent": 12, "text": ["Aligns the custom vector specified by ", {"type": "ui", "text": ["Custom Forward Vector"]}, " with the ", {"type": "ui", "text": ["Target Forward Vector"]}, "."], "extent": [16076, 16189]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "initup"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Custom Forward Direction"], "extent": [16189, 16219], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Forward Direction"]}, " is ", {"type": "ui", "text": ["Custom"]}, ", this is the direction to align with the ", {"type": "ui", "text": ["Target Forward Vector"]}, "."], "extent": [16246, 16364]}], "container": true, "attrs": {"id": "initupcustom"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Target Forward Vector"], "extent": [16364, 16391], "body": [{"type": "para", "indent": 8, "text": ["This is the direction that the ", {"type": "ui", "text": ["Forward Direction"]}, " will be pointed in after mapping the ", {"type": "ui", "text": ["Normal Direction"]}, " to the surface normals."], "extent": [16412, 16556]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["No Target"], "extent": [16556, 16575], "body": [{"type": "para", "indent": 12, "text": ["Does not align the ", {"type": "ui", "text": ["Forward Direction"]}, " with any given direction."], "extent": [16575, 16663]}], "container": true}, {"type": "dt", "indent": 8, "text": ["X"], "extent": [16663, 16674], "body": [{"type": "para", "indent": 12, "text": ["Align the ", {"type": "ui", "text": ["Forward Direction"]}, " with the X direction."], "extent": [16674, 16749]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Y"], "extent": [16749, 16760], "body": [{"type": "para", "indent": 12, "text": ["Align the ", {"type": "ui", "text": ["Forward Direction"]}, " with the Y direction."], "extent": [16760, 16835]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Z"], "extent": [16835, 16846], "body": [{"type": "para", "indent": 12, "text": ["Align the ", {"type": "ui", "text": ["Forward Direction"]}, " with the Z direction."], "extent": [16846, 16921]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom"], "extent": [16921, 16937], "body": [{"type": "para", "indent": 12, "text": ["Align the ", {"type": "ui", "text": ["Forward Direction"]}, " with the custom direction specified by the ", {"type": "ui", "text": ["Custom Forward Vector"]}, "."], "extent": [16937, 17060]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Attribute"], "extent": [17060, 17079], "body": [{"type": "para", "indent": 12, "text": ["Align the ", {"type": "ui", "text": ["Forward Direction"]}, " on each point individually with the direction specified by the point attribute ", {"type": "ui", "text": ["Target Forward Attribute"]}, "."], "extent": [17079, 17233]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "upbias"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Custom Forward Vector"], "extent": [17233, 17260], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Target Forward Vector"]}, " is ", {"type": "ui", "text": ["Custom"]}, ", this defines the direction that the ", {"type": "ui", "text": ["Forward Direction"]}, " is aligned with."], "extent": [17287, 17417]}], "container": true, "attrs": {"id": "upbiascustom"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Target Forward Attribute"], "extent": [17417, 17447], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Target Forward Vector"]}, " is ", {"type": "ui", "text": ["Attribute"]}, ", this is the name of a vector attribute on the surface that controls the forward direction at each point."], "extent": [17474, 17637]}], "container": true, "attrs": {"id": "upbiasattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Blend Normals"], "extent": [17637, 17656], "body": [{"type": "para", "indent": 8, "text": ["When the checkbox next to ", {"type": "ui", "text": ["Blend Normals With"]}, " is on, the node will blend the ", {"type": "q", "text": ["up"]}, " direction of the instances by a certain amount away from the surface normal direction toward the ", {"type": "ui", "text": ["Blend Target"]}, " direction."], "extent": [17688, 17907]}], "container": true, "attrs": {"id": "blendtowardtarget"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Blend Normals With"], "extent": [17907, 17931], "body": [{"type": "para", "indent": 8, "text": ["Blends the ", {"type": "q", "text": ["up"]}, " direction of the instances away from the surface normal direction toward this direction."], "extent": [17957, 18071]}, {"type": "para", "indent": 8, "text": ["For example, if all instances are pointing ", {"type": "q", "text": ["up"]}, " away from the surface, and you set this to ", {"type": "q", "text": ["Z"]}, " and the ", {"type": "ui", "text": ["Amount"]}, " to ", {"type": "code", "text": ["1.0"]}, ", the instances will point ", {"type": "em", "text": ["tangent to the surface"]}, " instead of away from the surface."], "extent": [18071, 18288]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["X"], "extent": [18288, 18299], "body": [{"type": "para", "indent": 12, "text": ["Blends normals toward the X direction."], "extent": [18299, 18359]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Y"], "extent": [18359, 18370], "body": [{"type": "para", "indent": 12, "text": ["Blends normals toward the Y direction."], "extent": [18370, 18430]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Z"], "extent": [18430, 18441], "body": [{"type": "para", "indent": 12, "text": ["Blends normals toward the Z direction."], "extent": [18441, 18501]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom"], "extent": [18501, 18517], "body": [{"type": "para", "indent": 12, "text": ["Blends normals toward the custom direction specified by the ", {"type": "ui", "text": ["Custom Target"]}, "."], "extent": [18517, 18617]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Attribute"], "extent": [18617, 18636], "body": [{"type": "para", "indent": 12, "text": ["Blends normals toward the direction specified on each point by the ", {"type": "ui", "text": ["Blend Target Attribute"]}, "."], "extent": [18636, 18744]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "blendtarget"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Custom Target"], "extent": [18744, 18763], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Blend Target"]}, " is ", {"type": "ui", "text": ["Custom"]}, ", this is the direction to blend the point normals toward."], "extent": [18795, 18898]}], "container": true, "attrs": {"id": "blendcustomtarget"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Blend Target Attribute"], "extent": [18898, 18926], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Blend Target"]}, " is ", {"type": "ui", "text": ["Attribute"]}, ", this is the name of an attribute containing the direction vector to blend the point normals toward."], "extent": [18961, 19110]}], "container": true, "attrs": {"id": "blendtargetattribute"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Amount"], "extent": [19110, 19122], "body": [{"type": "para", "indent": 8, "text": ["The amount to blend the point normal direction with the target direction. ", {"type": "code", "text": ["0.0"]}, " just uses the normals. ", {"type": "code", "text": ["1.0"]}, " just uses the target direction. Values in between blend between the point normals and the target direction."], "extent": [19148, 19374]}], "container": true, "attrs": {"id": "blendamount"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scale Blend by Attribute"], "extent": [19374, 19404], "body": [{"type": "para", "indent": 8, "text": ["Whether to scale the blending ", {"type": "ui", "text": ["Amount"]}, " by an attribute on the input geometry."], "extent": [19437, 19526]}], "container": true, "attrs": {"id": "scaleblendbyattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Blend Attribute"], "extent": [19526, 19547], "body": [{"type": "para", "indent": 8, "text": ["The name of an attribute on the surface to use to scale the blending ", {"type": "ui", "text": ["Amount"]}, " for each point."], "extent": [19576, 19682]}], "container": true, "attrs": {"id": "blendattribute"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Rotation "], "extent": [19682, 19699], "body": [{"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19699, 19710], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_orient_before.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_orient_before.jpg"}], "role": "item", "extent": [19710, 19785], "body": [{"type": "summary", "indent": 12, "text": ["All instances with ", {"type": "q", "text": ["up"]}, " direction pointing along surface normal."], "extent": [19785, 19868]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [19868, 19878], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_orient_normal.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_orient_normal.jpg"}], "role": "item", "extent": [19878, 19953], "body": [{"type": "summary", "indent": 12, "text": ["Randomly rotated away from default up direction by up to 30 degrees."], "extent": [19953, 20041]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Max Random Cone Angle"], "extent": [20041, 20068], "body": [{"type": "para", "indent": 8, "text": ["Rotates each instance away from the default ", {"type": "q", "text": ["up"]}, " direction by a certain amount, up to this maximum number of degrees. This creates variation in the orientation of the instances."], "extent": [20094, 20281]}], "container": true, "attrs": {"id": "uniformrand"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scale Cone by Attribute"], "extent": [20281, 20310], "body": [{"type": "para", "indent": 8, "text": ["If you set the popup menu next to ", {"type": "ui", "text": ["Max Random Cone Angle"]}, " to ", {"type": "ui", "text": ["Scale by attribute"]}, ", you can scale the maximum random angle change using an attribute on the surface."], "extent": [20342, 20519]}], "container": true, "attrs": {"id": "scaleconebyattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Cone Angle Attribute"], "extent": [20519, 20545], "body": [{"type": "para", "indent": 8, "text": ["When the popup menu next to ", {"type": "ui", "text": ["Max Random Cone Angle"]}, " is set to ", {"type": "ui", "text": ["Scale by attribute"]}, ", this is the name of an attribute on the surface to use to scale the ", {"type": "ui", "text": ["Max Random Cone Angle"]}, "."], "extent": [20573, 20765]}], "container": true, "attrs": {"id": "coneattribute"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Rotation Around Normal "], "extent": [20765, 20800]}, {"type": "para", "indent": 4, "text": ["The following parameters control how the node rotates the instances around the ", {"type": "q", "text": ["up"]}, " direction."], "extent": [20800, 20901]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [20901, 20911], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_orient_before.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_orient_before.jpg"}], "role": "item", "extent": [20911, 20986], "body": [{"type": "summary", "indent": 12, "text": ["All instances with ", {"type": "q", "text": ["forward"]}, " direction pointing the same way."], "extent": [20986, 21066]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [21066, 21076], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_orient_rotation.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_orient_rotation.jpg"}], "role": "item", "extent": [21076, 21153], "body": [{"type": "summary", "indent": 12, "text": ["Randomly rotated around the ", {"type": "q", "text": ["up"]}, " pivot, from 0 to 360 degrees."], "extent": [21153, 21235]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Min Angle"], "extent": [21235, 21250], "body": [{"type": "para", "indent": 8, "text": ["The minimum angle to be generated randomly."], "extent": [21279, 21332]}], "container": true, "attrs": {"id": "perprotrandmin"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Max Angle"], "extent": [21332, 21347], "body": [{"type": "para", "indent": 8, "text": ["The maximum angle to be generated randomly."], "extent": [21376, 21429]}], "container": true, "attrs": {"id": "perprotrandmax"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Round Rotation Around Normal"], "extent": [21429, 21463], "body": [{"type": "para", "indent": 8, "text": ["Whether to round the sampled random angle to the closest integer multiple of ", {"type": "ui", "text": ["Round to Multiple Of"]}, "."], "extent": [21490, 21602]}], "container": true, "attrs": {"id": "roundperprot"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Round to Multiple Of"], "extent": [21602, 21628], "body": [{"type": "para", "indent": 8, "text": ["The value to round the sampled random angle to the closest integer multiple of. For example, if you are instancing buildings, you can rotate them but keep them aligned by only allowing them to rotate 90 degrees at a time."], "extent": [21655, 21886]}], "container": true, "attrs": {"id": "perprandstep"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Offset Angle"], "extent": [21886, 21904], "body": [{"type": "para", "indent": 8, "text": ["This is the offset angle to rotate each point around its normal vector after the random part of the rotation has been determined."], "extent": [21926, 22065]}], "container": true, "attrs": {"id": "basenml"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scale Offset Angle by Attribute"], "extent": [22065, 22102], "body": [{"type": "para", "indent": 8, "text": ["Whether to scale the ", {"type": "ui", "text": ["Offset Angle"]}, " on each point by an attribute."], "extent": [22137, 22215]}], "container": true, "attrs": {"id": "scalebasenmlbyattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Offset Angle Attribute"], "extent": [22215, 22243], "body": [{"type": "para", "indent": 8, "text": ["An attribute specifying the factor to scale the ", {"type": "ui", "text": ["Offset Angle"]}, " by on each point."], "extent": [22274, 22366]}], "container": true, "attrs": {"id": "basenmlattribute"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Remap Using Distribution Ramp"], "extent": [22366, 22401], "body": [{"type": "para", "indent": 8, "text": ["Whether to use a ramp to define the inverse CDF of the probability distribution that random angles are sampled from."], "extent": [22430, 22556]}], "container": true, "attrs": {"id": "useperprotramp"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Rotation Distribution Ramp"], "extent": [22556, 22588], "body": [{"type": "para", "indent": 8, "text": ["A ramp defining the inverse CDF of the probability distribution that random angles are sampled from between the ", {"type": "ui", "text": ["Min Random Angle"]}, " and the ", {"type": "ui", "text": ["Max Random Angle"]}, "."], "extent": [22614, 22787]}], "container": true, "attrs": {"id": "perprotramp"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 3, "id": "point_generation", "container": true, "type": "h", "indent": 0, "text": ["Point Generation"], "extent": [22787, 22829], "body": [{"type": "para", "indent": 0, "text": ["This tab is not available when ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Add Attributes to Existing Point Cloud"]}, "."], "extent": [22829, 22919]}, {"level": 3, "type": "sep", "indent": 0, "text": [" Noise "], "extent": [22919, 22933]}, {"type": "para", "indent": 0, "text": ["These parameters are visible when ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Scatter Points Around Constraint Points"]}, "."], "extent": [22933, 23026]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Add Scatter Noise"], "extent": [23026, 23045], "body": [{"type": "para", "indent": 4, "text": ["Whether to add noise to the scattered point positions ", {"type": "em", "text": ["before"]}, " influencing points to be near the constraint points."], "extent": [23071, 23192]}], "container": true, "attrs": {"id": "addscatternoise"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Roughness"], "extent": [23192, 23203], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Add scatter noise"]}, " is on, this controls the influence falloff for each successive noise layer."], "extent": [23235, 23343]}], "container": true, "attrs": {"id": "scatternoiseroughness"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Amplitude"], "extent": [23343, 23354], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Add scatter noise"]}, " is on, this is the maximum displacement added to the points by the noise."], "extent": [23386, 23492]}], "container": true, "attrs": {"id": "scatternoiseamplitude"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Element Size"], "extent": [23492, 23506], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Add scatter noise"]}, " is on, this is the base feature size of the generated noise."], "extent": [23540, 23634]}], "container": true, "attrs": {"id": "scatternoiseelementsize"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Relaxation "], "extent": [23634, 23653]}, {"type": "para", "indent": 0, "text": ["The node scatters the new points, then iteratively moves the points to satisfy spacing and other constraints. This iterative process is called ", {"type": "em", "text": ["relaxation"]}, "."], "extent": [23653, 23812]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Relax Iterations"], "extent": [23812, 23830], "body": [{"type": "para", "indent": 4, "text": ["The number of relax iterations to apply to the points. More iterations are slower but can give better positioning of the points."], "extent": [23856, 23990]}], "container": true, "attrs": {"id": "relaxiterations"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Remove Overlapping"], "extent": [23990, 24010], "body": [{"type": "para", "indent": 4, "text": ["Whether to remove points that are too close to one another to preserve spacing constraints."], "extent": [24038, 24135]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [24135, 24145], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_around_overlap.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_around_overlap.jpg"}], "role": "item", "extent": [24145, 24221], "body": [{"type": "summary", "indent": 12, "text": ["Scattering around constraint points with avoid constraint points but without remove overlapping points."], "extent": [24221, 24344]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [24344, 24354], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_around_avoid.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_around_avoid.jpg"}], "role": "item", "extent": [24354, 24428], "body": [{"type": "summary", "indent": 12, "text": ["Scattering around constraint points with avoid constraint points and remove overlapping points."], "extent": [24428, 24543]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "removeoverlapping"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Overlap Tolerance"], "extent": [24543, 24562], "body": [{"type": "para", "indent": 4, "text": ["The minimum amount of overlap allowed, as a fraction of the radius required for a point to be removed."], "extent": [24589, 24697]}], "container": true, "attrs": {"id": "overlaptolerance"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Avoid Constraint Points"], "extent": [24697, 24722], "body": [{"type": "para", "indent": 4, "text": ["When this is on, you can specify additional constraint points from the second input in the ", {"type": "ui", "text": ["Constraint Point Group"]}, " below. The scattered points will be pulled toward or pushed away from these constraint points during relaxation, based on each constraint point\u2019s ", {"type": "code", "text": ["pscale"]}, " attribute."], "extent": [24754, 25043]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [25043, 25053], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_around_noavoid.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_around_noavoid.jpg"}], "role": "item", "extent": [25053, 25129], "body": [{"type": "summary", "indent": 12, "text": ["Scattering around constraint points without avoid constraint points or remove overlapping points."], "extent": [25129, 25246]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [25246, 25256], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/nodes/sop/scatter_and_align_around_avoid.jpg", "type": "link", "text": "", "fullpath": "/images/nodes/sop/scatter_and_align_around_avoid.jpg"}], "role": "item", "extent": [25256, 25330], "body": [{"type": "summary", "indent": 12, "text": ["Scattering around constraint points with avoid constraint points and remove overlapping points."], "extent": [25330, 25445]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "avoidconstraintpoints"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Constraint Point Group"], "extent": [25445, 25469], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Avoid constraint points"]}, " is on, this is the group of points in the second input that repel or attract the scattered points. The ", {"type": "code", "text": ["pscale"]}, " attribute on each constraint point controls how strongly the point repels the scattered points (if ", {"type": "code", "text": ["pscale"]}, " is positive), or attracts them (if ", {"type": "code", "text": ["pscale"]}, " is negative). Leave this blank to use all existing points in the second input. To select points by the ", {"scheme": null, "value": "#tag_attr", "type": "link", "text": ["tag attribute"], "fullpath": "/nodes/sop/scatteralign#tag_attr", "fragment": "#tag_attr"}, ", use the ", {"type": "code", "text": ["@tag=", {"type": "var", "text": ["name"]}]}, " ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group syntax"], "fullpath": "/model/groups"}, ". "], "extent": [25500, 25987]}], "container": true, "attrs": {"id": "constraintpointgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Radius Scale"], "extent": [25987, 26001], "body": [{"type": "para", "indent": 4, "text": ["Scales the ", {"type": "code", "text": ["pscale"]}, " attribute on the points in the ", {"type": "ui", "text": ["Constraint Point Group"]}, " above."], "extent": [26033, 26123]}], "container": true, "attrs": {"id": "constraintradiusscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Emergency Limit"], "extent": [26123, 26144], "body": [{"type": "para", "indent": 4, "text": ["Turn on the checkbox next to ", {"type": "ui", "text": ["Emergency Limit"]}, " to prevent the node from creating more than a certain maximum number of points."], "extent": [26172, 26306]}], "container": true, "attrs": {"id": "useemergencylimit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Emergency Limit"], "extent": [26306, 26323], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of points this node is allowed to generate. If you accidentally set some combination of parameters that causes a huge spike in point density, this can prevent the node from cooking for an extremely long time, or running out of memory. This is especially useful in batch processing where a human is not available to press ", {"keys": ["Esc"], "type": "keys", "text": null}, " to cancel an over-long cook."], "extent": [26348, 26731]}], "container": true, "attrs": {"id": "emergencylimit"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "attributes_tab", "container": true, "type": "h", "indent": 0, "text": ["Attributes"], "extent": [26731, 26765], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Use Prim Num Attribute"], "extent": [26765, 26790], "body": [{"type": "para", "indent": 4, "text": ["Turn this checkbox on to create an attribute on the scattered points containing the primitive number of the corresponding primitive (polygon face) on the surface."], "extent": [26817, 26985]}], "container": true, "attrs": {"id": "useprimnumattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prim Num Attribute"], "extent": [26985, 27005], "body": [{"type": "para", "indent": 4, "text": ["The name of an attribute to create on the scattered points containing the primitive number of the corresponding primitive (polygon face) on the surface."], "extent": [27029, 27187]}], "container": true, "attrs": {"id": "primnumattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Prim UVW Attribute"], "extent": [27187, 27211], "body": [{"type": "para", "indent": 4, "text": ["Turn this checkbox on to create an attribute on the scattered points containing the corresponding UVW coordinates on the surface."], "extent": [27238, 27373]}], "container": true, "attrs": {"id": "useprimuvwattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prim UVW Attribute"], "extent": [27373, 27393], "body": [{"type": "para", "indent": 4, "text": ["The name of an attribute to create on the scattered points containing the corresponding UVW coordinates on the surface."], "extent": [27417, 27542]}], "container": true, "attrs": {"id": "primuvwattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Radius Attribute"], "extent": [27542, 27567], "body": [{"type": "para", "indent": 4, "text": ["Turn this checkbox on to create an attribute on the scattered points containing the radius of the point (this will affect the object size when you copy/instance onto the points)."], "extent": [27596, 27780]}], "container": true, "attrs": {"id": "outputradiusattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Radius Attribute"], "extent": [27780, 27798], "body": [{"type": "para", "indent": 4, "text": ["The name of an attribute to create on the scattered points containing the point radius (this will affect the object size when you copy/instance onto the points). This is on by default with the name ", {"type": "code", "text": ["pscale"]}, " (this is Houdini\u2019s standard instancing attribute for point scale)."], "extent": [27821, 28100]}], "container": true, "attrs": {"id": "radiusattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Orient Attribute"], "extent": [28100, 28125], "body": [{"type": "para", "indent": 4, "text": ["Turn this checkbox on to create an attribute on the scattered points containing the orientation matrix of the point (this will affect the object orientation when you copy/instance onto the points)."], "extent": [28154, 28357]}], "container": true, "attrs": {"id": "outputorientattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Orient Attribute"], "extent": [28357, 28375], "body": [{"type": "para", "indent": 4, "text": ["The name of an attribute to create on the scattered points containing the orientation matrix of the point (this will affect the object orientation when you copy/instance onto the points). This is on by default with the name ", {"type": "code", "text": ["orient"]}, " (this is one of Houdini\u2019s standard instancing attributes for orientation)."], "extent": [28398, 28711]}], "container": true, "attrs": {"id": "orientattrib"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 0, "extent": [28711, 28717]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Surface Point Attributes"], "extent": [28717, 28744], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of point attributes to copy from the surface onto the scattered points. For example, if the surface has point colors, you can specify ", {"type": "code", "text": ["Cd"]}, " to transfer the surface color onto the scattered points. The default is ", {"type": "code", "text": ["*"]}, ", meaning transfer ", {"type": "em", "text": ["all"]}, " point attributes."], "extent": [28767, 29052]}], "container": true, "attrs": {"id": "pointattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Surface Vertex Attributes"], "extent": [29052, 29079], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of vertex attributes to copy from the surface onto the scattered points. The default is ", {"type": "code", "text": ["*"]}, ", meaning transfer ", {"type": "em", "text": ["all"]}, " vertex attributes."], "extent": [29101, 29264]}], "container": true, "attrs": {"id": "vertattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Surface Primitive Attributes"], "extent": [29264, 29294], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of primitive (polygon face) attributes to copy from the surface onto the scattered points. The default is empty, meaning transfer ", {"type": "em", "text": ["no"]}, " primitive attributes."], "extent": [29316, 29501]}], "container": true, "attrs": {"id": "primattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Surface Detail Attributes"], "extent": [29501, 29528], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of detail (whole geometry) attributes to copy from the surface onto the scattered points. The default is empty, meaning transfer ", {"type": "em", "text": ["no"]}, " detail attributes."], "extent": [29552, 29734]}], "container": true, "attrs": {"id": "detailattribs"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Assets"], "extent": [1573, 1586], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Uniform Scale"], "extent": [1586, 1602], "body": [{"type": "para", "indent": 4, "text": ["Apply this scale to every instanced asset. This can be useful when the assets were modelled at a different scale than the scene you are scattering them into."], "extent": [1626, 1789]}], "container": true, "attrs": {"id": "uniformscale2"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Normalize Assets"], "extent": [1789, 1807], "body": [{"type": "para", "indent": 4, "text": ["id: normalizeassets"], "extent": [1807, 1832]}, {"type": "para", "indent": 4, "text": ["???"], "extent": [1832, 1841]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mode"], "extent": [1841, 1847], "body": [{"type": "para", "indent": 4, "text": ["How the brush picks the assets to instance onto the filled points."], "extent": [1863, 1935]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Cycle"], "extent": [1935, 1946], "body": [{"type": "para", "indent": 8, "text": ["Cycle through the working set assets while iterating over each scattered point. This results in a more even distribution of all the assets in the working set than ", {"type": "ui", "text": ["Random"]}, "."], "extent": [1946, 2130]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Patches"], "extent": [2130, 2143], "body": [{"type": "para", "indent": 8, "text": ["Break the fill shape into random cellular patches (using a Worley noise function) and fill each patch with the same asset."], "extent": [2143, 2275]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Noise"], "extent": [2275, 2286], "body": [{"type": "para", "indent": 8, "text": ["Assign assets to points based on the pattern generated by a noise function."], "extent": [2286, 2371]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Random"], "extent": [2371, 2383], "body": [{"type": "para", "indent": 8, "text": ["Pick a random asset from the working set to instance onto each point."], "extent": [2383, 2462]}], "container": true}, {"type": "dt", "indent": 4, "text": ["VEXpression"], "extent": [2462, 2479], "body": [{"type": "para", "indent": 8, "text": ["Assign assets to points based on the result of one or more VEX expressions."], "extent": [2479, 2565]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "mode2"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Pieces"], "extent": [2565, 2580], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Shuffle Pieces"], "extent": [2580, 2601], "body": [{"type": "para", "indent": 8, "text": ["Randomly re-assign which assets are assigned to the different points/patches. If ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Cycle"]}, " or ", {"type": "ui", "text": ["Random"]}, ", this will appear to simply re-randomize the points. When ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Patches"]}, " or ", {"type": "ui", "text": ["Noise"]}, " or ", {"type": "ui", "text": ["VEXpression"]}, ", this will keep the patches/patterns created by the mode, but randomize which asset goes with each patch/pattern. Note that you can use ", {"type": "ui", "text": ["Offset"]}, " (below) to change the assets non-randomly."], "extent": [2623, 3053]}], "container": true, "attrs": {"id": "shuffle"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Seed"], "extent": [3053, 3063], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Shuffle pieces"]}, " is on, the random number seed to use for shuffling. Changing this number will give a different ", {"type": "q", "text": ["random"]}, " outcome. For example, if you want different orderings in each frame, set the seed to ", {"type": "code", "text": ["$F"]}, " (the current frame number)."], "extent": [3082, 3337]}], "container": true, "attrs": {"id": "seed"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Offset"], "extent": [3337, 3349], "body": [{"type": "para", "indent": 8, "text": ["Like ", {"type": "ui", "text": ["Shuffle Pieces"]}, " (above), but instead of re-assigning assets randomly, it shifts each asset to the next one in order in the working set. (Note that you can use this and ", {"type": "ui", "text": ["Shuffle Pieces"]}, " at the same time to ", {"type": "em", "text": ["both"]}, " shuffle and offset the asset choices.) This can be useful if the order of your working set has meaning (for example, if it goes from big assets to small assets), or if you just want to try some different outcomes to see how they look.    "], "extent": [3370, 3841]}], "container": true, "attrs": {"id": "offset"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Patches"], "extent": [3841, 3857], "body": [{"type": "para", "indent": 4, "text": ["These parameters are visible when ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Patches"]}, "."], "extent": [9456, 9520]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Patch Size"], "extent": [9520, 9536], "body": [{"type": "para", "indent": 8, "text": ["Controls the average size of the patches."], "extent": [9560, 9611]}], "container": true, "attrs": {"id": "patchsize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Scale"], "extent": [9611, 9622], "body": [{"type": "para", "indent": 8, "text": ["Allows you to control the average height, width, and depth of the patches separately."], "extent": [9647, 9742]}], "container": true, "attrs": {"id": "patchscale"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Patch Offset"], "extent": [9742, 9760], "body": [{"type": "para", "indent": 8, "text": ["Moves the noise field relative to the points."], "extent": [9786, 9842]}], "container": true, "attrs": {"id": "patchoffset"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Distortion "], "extent": [9842, 9865]}, {"type": "para", "indent": 4, "text": ["These parameters can optionally add distortion on top of the base noise pattern."], "extent": [9865, 9952]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Strength"], "extent": [9952, 9966], "body": [{"type": "para", "indent": 8, "text": ["The strength of distortion to add."], "extent": [9996, 10040]}], "container": true, "attrs": {"id": "distortstrength"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Size"], "extent": [10040, 10050], "body": [{"type": "para", "indent": 8, "text": ["The size of the distortion."], "extent": [10076, 10113]}], "container": true, "attrs": {"id": "distortsize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Roughness"], "extent": [10113, 10128], "body": [{"type": "para", "indent": 8, "text": ["The roughness of the distortion."], "extent": [10154, 10196]}], "container": true, "attrs": {"id": "worleyrough"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Offset"], "extent": [10196, 10208], "body": [{"type": "para", "indent": 8, "text": ["An offset added to the center of the distortion map."], "extent": [10236, 10299]}], "container": true, "attrs": {"id": "distortoffset"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Noise"], "extent": [3918, 3932], "body": [{"type": "para", "indent": 4, "text": ["These parameters are visible when ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Noise"]}, "."], "extent": [10337, 10399]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Noise Type"], "extent": [10399, 10415], "body": [{"type": "para", "indent": 8, "text": ["The function to use to generate the noise field. The node uses the point positions as the seed for the random number generator."], "extent": [10440, 10577]}], "container": true, "attrs": {"id": "noisebasis"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Element Size"], "extent": [10577, 10595], "body": [{"type": "para", "indent": 8, "text": ["Controls the size of the noise features."], "extent": [10626, 10676]}], "container": true, "attrs": {"id": "noiseelementsize"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Element Scale"], "extent": [10676, 10695], "body": [{"type": "para", "indent": 8, "text": ["Allows you to control the height, width, and depth of the noise features separately."], "extent": [10727, 10821]}], "container": true, "attrs": {"id": "noiseelementscale"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Offset"], "extent": [10821, 10833], "body": [{"type": "para", "indent": 8, "text": ["Moves the noise field relative to the points."], "extent": [10855, 10910]}], "container": true, "attrs": {"id": "offset2"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Max Octaves"], "extent": [10910, 10927], "body": [{"type": "para", "indent": 8, "text": ["The number of combined noise layers."], "extent": [10950, 10996]}], "container": true, "attrs": {"id": "noiseoct"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Roughness"], "extent": [10996, 11011], "body": [{"type": "para", "indent": 8, "text": ["The influence falloff for each successive noise layer."], "extent": [11036, 11101]}], "container": true, "attrs": {"id": "noiserough"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Distortion "], "extent": [11101, 11124]}, {"type": "para", "indent": 4, "text": ["These parameters can optionally add distortion on top of the base noise pattern."], "extent": [11124, 11211]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Lattice Warp"], "extent": [11211, 11229], "body": [{"type": "para", "indent": 8, "text": ["Adds ", {"type": "q", "text": ["stringiness"]}, " or ", {"type": "q", "text": ["wiriness"]}, " to standard noise."], "extent": [11248, 11309]}], "container": true, "attrs": {"id": "disp"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Freq"], "extent": [11309, 11319], "body": [{"type": "para", "indent": 8, "text": ["The frequency of the ", {"type": "ui", "text": ["Lattice Warp"]}, "."], "extent": [11342, 11390]}], "container": true, "attrs": {"id": "dispfreq"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Gradient Warp"], "extent": [11390, 11409], "body": [{"type": "para", "indent": 8, "text": ["Widens the peaks or valleys of the noise output."], "extent": [11429, 11487]}], "container": true, "attrs": {"id": "gflow"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Remap Noise"], "extent": [11487, 11504], "body": [{"type": "para", "indent": 8, "text": ["A ramp used to remap noise values."], "extent": [11529, 11574]}], "container": true, "attrs": {"id": "noiseremap"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Random"], "extent": [3991, 4006], "body": [{"type": "para", "indent": 4, "text": ["These parameters are visible when ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Random"]}, "."], "extent": [11614, 11677]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Weight Method"], "extent": [11677, 11696], "body": [{"type": "para", "indent": 8, "text": ["The way of specifying the weight that each piece is given."], "extent": [11723, 11791]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Uniform Distribution"], "extent": [11791, 11821], "body": [{"type": "para", "indent": 12, "text": ["Each piece is equally likely."], "extent": [11821, 11872]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Piece Weights"], "extent": [11872, 11895], "body": [{"type": "para", "indent": 12, "text": ["Give each piece a weighting using a multiparm, allowing you to make some pieces more likely than others."], "extent": [11895, 12013]}, {"type": "para", "indent": 12, "text": ["If you choose this option, click the ", {"type": "ui", "text": ["Autofill Pieces"]}, " button to automatically set up the multiparm based on the pieces in the second input."], "extent": [12013, 12177]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Weight Attribute"], "extent": [12177, 12203], "body": [{"type": "para", "indent": 12, "text": ["Use a primitive float attribute on the piece geometry that sets the piece\u2019s random weighting. The weighting for a piece is the ", {"type": "em", "text": ["average"]}, " of this attribute\u2019s values across the primitives of the piece."], "extent": [12203, 12416]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "weightmethod"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Seed"], "extent": [12416, 12426], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Weight Method"]}, " is not ", {"type": "ui", "text": ["Uniform"]}, ", this is the seed value for the random number generator that chooses between weighted alternatives."], "extent": [12445, 12596]}], "container": true, "attrs": {"id": "seed"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Autofill Pieces"], "extent": [12596, 12617], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Weight Method"]}, " is ", {"type": "ui", "text": ["Piece Weights"]}, ", click this button to automatically set up the multiparm based on the pieces in the second input."], "extent": [12647, 12799]}, {"type": "para", "indent": 8, "text": ["A button that will automatically fill out the ", {"type": "ui", "text": ["Number of Assets"]}, " and ", {"type": "ui", "text": ["Piece"]}, " parameters\n        such that each unique piece in the geometry is included in the list."], "extent": [12799, 12977]}], "container": true, "attrs": {"id": "autofillnamernd"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Number of Pieces"], "extent": [12977, 12999], "body": [{"type": "para", "indent": 8, "text": ["The number of pieces to specify weights for in the multiparm."], "extent": [13020, 13091]}], "container": true, "attrs": {"id": "numval"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Piece"], "extent": [13091, 13102], "body": [{"type": "para", "indent": 8, "text": ["The attribute value for this piece."], "extent": [13121, 13166]}], "container": true, "attrs": {"id": "name"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Weight"], "extent": [13166, 13178], "body": [{"type": "para", "indent": 8, "text": ["A value representing how likely this piece is to appear in the chain, relative to other pieces. The weights of all pieces are normalized to add up to ", {"type": "code", "text": ["1.0"]}, " and then used as probabilities. For example, if three pieces have weights of ", {"type": "code", "text": ["1"]}, ", ", {"type": "code", "text": ["1"]}, ", and ", {"type": "code", "text": ["2"]}, ", the last piece is likely to appear 50% of the time, while the other two are each likely to appear 25% of the time."], "extent": [13200, 13576]}], "container": true, "attrs": {"id": "weight_"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Weight Attribute"], "extent": [13576, 13598], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Mode"]}, " is ", {"type": "ui", "text": ["Weight Attribute"]}, ", the name of a primitive float attribute on the piece geometry that sets the piece\u2019s random weighting. The weighting for a piece is the ", {"type": "em", "text": ["average"]}, " of this attribute\u2019s values across the primitives of the piece."], "extent": [13625, 13882]}], "container": true, "attrs": {"id": "weightattrib"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["VEXpression"], "extent": [4066, 4086], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Number of VEXpressions"], "extent": [16487, 16515], "body": [{"type": "para", "indent": 8, "text": ["The number of VEX expressions to test."], "extent": [16536, 16584]}], "container": true, "attrs": {"id": "numvex"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Enable piece"], "extent": [16584, 16602], "body": [{"type": "para", "indent": 8, "text": ["Use the checkbox next to each expression to control whether it is used or not."], "extent": [16631, 16719]}], "container": true, "attrs": {"id": "enablevexpiece"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Piece"], "extent": [16719, 16730], "body": [{"type": "para", "indent": 8, "text": ["The name of the piece to assign to points where the expression returns true. If you enter a space-separated list of piece names, the node will choose one randomly."], "extent": [16753, 16926]}], "container": true, "attrs": {"id": "vexpiece"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["VEXpression"], "extent": [16926, 16943], "body": [{"type": "para", "indent": 8, "text": ["The VEX expression to run for each point. If the expression evaluates to a non-zero value, it ", {"type": "q", "text": ["matches"]}, " the point and the corresponding piece will be assigned to the point."], "extent": [16965, 17148]}], "container": true, "attrs": {"id": "vexcode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Unmatched Piece"], "extent": [17148, 17165], "body": [{"type": "para", "indent": 4, "text": ["When none of the rules in the multiparm match, use this piece. If you enter a space-separated list of piece names, the node will choose one randomly."], "extent": [17225, 17380]}], "container": true, "attrs": {"id": "attribunmatchedpiece", "also": "vexunmatchedpiece"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Unmatched Group"], "extent": [17380, 17401], "body": [{"type": "para", "indent": 4, "text": ["Turn on the checkbox next to ", {"type": "ui", "text": ["Unmatched group"]}, " to create a group in the output containing any unmatched points."], "extent": [17467, 17586]}], "container": true, "attrs": {"id": "useattribunmatchedgroup", "also": "usevexunmatchedgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Unmatched Group"], "extent": [17586, 17603], "body": [{"type": "para", "indent": 4, "text": ["Turn on the checkbox and enter a group name to create a group in the output containing any unmatched points."], "extent": [17663, 17777]}], "container": true, "attrs": {"id": "attribunmatchedgroup", "also": "vexunmatchedgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Seed"], "extent": [17777, 17783], "body": [{"type": "para", "indent": 4, "text": ["The seed value for the random number generator for when the node chooses between alternatives."], "extent": [17826, 17927]}], "container": true, "attrs": {"id": "seedmapattrib", "also": "seedvex"}, "role": "item"}], "container": true, "role": "item_group"}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [4544, 4553], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/layout", "type": "link", "text": "", "fullpath": "/nodes/lop/layout"}], "extent": [4553, 4574]}], "container": true}], "text": "Related"}], "title": ["Fill (layout brush)"], "summary": ["Lets you draw shapes and fill them with scattered assets."], "included": ["/nodes/sop/_layoutbrush", "/nodes/sop/attribfrompieces", "/nodes/sop/scatteralign"]}