{"type": "root", "attrs": {"parent": "karma", "flow": "kug", "index": "no"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": [{"type": "supertitle", "text": ["Karma"]}, " Geometry"], "extent": [0, 22]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [34, 43], "body": [{"type": "para", "indent": 4, "text": ["Work In Progress. Expect information and images to update periodically while this notice is present."], "extent": [43, 149]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Karma supports all of the geometry primitives provided by USD. One departure USD makes from traditional workflows is that many geometry properties are not renderer-specific, but is part of the ", {"scheme": null, "value": "/solaris/glossary#schema", "type": "link", "text": ["schema"], "fullpath": "/solaris/glossary#schema", "fragment": "#schema"}, " defining the primitive. One example is subdivision surfaces, which are a built-in property of the Mesh schema. Many characteristics of primitives are shared between primitive types, as their schema definitions often inherit from one another."], "extent": [88, 558]}, {"type": "para", "indent": 0, "text": ["Many nodes can set properties on primitives, but for rendering the three most common nodes are:"], "extent": [558, 655]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/editproperties", "type": "link", "text": "", "fullpath": "/solaris/LOP/editproperties"}, " "], "role": "td", "extent": [655, 683], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/editproperties", "type": "link", "text": ["Edit Properties"], "fullpath": "/nodes/lop/editproperties"}, " "], "role": "td", "extent": [683, 731], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["This node makes it convenient to edit primitives. There are several tools based on this node for creating or editing specifi primitive types (i.e. Mesh Edit, BasisCurves Edit, etc\u2026)"], "extent": [751, 943]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/solaris/LOP/rendergeometrysettings"}, " "], "role": "td", "extent": [943, 979], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/rendergeometrysettings", "type": "link", "text": ["Render Geometry Settings"], "fullpath": "/nodes/lop/rendergeometrysettings"}, " "], "role": "td", "extent": [979, 1044], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["This node provides renderer-specific attributes and settings; any third-party renderer can add their parameters to this node, but at the very least Karma\u2019s properties should be there."], "extent": [1064, 1257]}, {"type": "para", "indent": 8, "text": ["Nearly all properties can be applied to any primitive type. ", {"type": "em", "text": ["Geometry"]}, " and ", {"type": "em", "text": ["Light"]}, " properties are the ones less generally applicable."], "extent": [1257, 1400]}, {"type": "para", "indent": 8, "text": ["Each section below has useful render properties may be highlighted, which can be set using this node."], "extent": [1400, 1510]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/configureprimitive", "type": "link", "text": "", "fullpath": "/solaris/LOP/configureprimitive"}, " "], "role": "td", "extent": [1510, 1542], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/configureprimitive", "type": "link", "text": ["Configure Primitive"], "fullpath": "/nodes/lop/configureprimitive"}, " "], "role": "td", "extent": [1542, 1598], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["This node lets you set ", {"scheme": null, "value": "/solaris/glossary#visibility", "type": "link", "text": ["visibility"], "fullpath": "/solaris/glossary#visibility", "fragment": "#visibility"}, " and ", {"scheme": null, "value": "/solaris/glossary#activate", "type": "link", "text": ["activation"], "fullpath": "/solaris/glossary#activate", "fragment": "#activate"}, " on primitives."], "extent": [1618, 1751]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["When lighting and rendering with Solaris, it may be necessary to create or modify geometry primitives or attributes. These nodes are a good starting point for those tasks:"], "extent": [1751, 1924]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/sopcreate", "type": "link", "text": "", "fullpath": "/solaris/LOP/sopcreate"}, " "], "role": "td", "extent": [1924, 1947], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/sopcreate", "type": "link", "text": ["SOP Create LOP"], "fullpath": "/nodes/lop/sopcreate"}, " "], "role": "td", "extent": [1947, 1989], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Create new geometry from SOP networks. SOP primitives are converted into their USD equivalents."], "extent": [2009, 2114]}, {"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": "", "fullpath": "/solaris/sop_import"}, " for details."], "extent": [2114, 2161]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/sopmodify", "type": "link", "text": "", "fullpath": "/solaris/LOP/sopmodify"}, " "], "role": "td", "extent": [2161, 2184], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/sopmodify", "type": "link", "text": ["SOP Modify LOP"], "fullpath": "/nodes/lop/sopmodify"}, " "], "role": "td", "extent": [2184, 2226], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Provides the power to edit geometry using SOPs. Useful for in-line modifications when rendering with Karma and Solaris."], "extent": [2226, 2354]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/attribwrangle", "type": "link", "text": "", "fullpath": "/solaris/LOP/attribwrangle"}, " "], "role": "td", "extent": [2354, 2381], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/attribwrangle", "type": "link", "text": ["Attribute Wrangle LOP"], "fullpath": "/nodes/lop/attribwrangle"}, " "], "role": "td", "extent": [2381, 2434], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Use VEX snippets to alter geometry as needed; use ", {"type": "em", "text": ["Run on Elements of Array Attributes"]}, " to operate on a per-point basis of a mesh."], "extent": [2434, 2574]}]}], "divider": false}]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2574, 2580], "body": [{"type": "para", "indent": 4, "text": ["Advanced USD pipelines may have custom Prim Adapters, which should just work with Karma, when plugin paths are configured properly."], "extent": [2580, 2717]}], "container": true}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Basic Primitives"], "extent": [2717, 2740], "body": [{"type": "para", "indent": 0, "text": ["While these primitives behave like 3D solid shapes, what USD sends to Hydra/Karma is a polygonal mesh. This is why rendered spheres don\u2019t look perfectly round, and pinched poles are visible at certain angles."], "extent": [2740, 2951]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/capsule", "type": "link", "text": "", "fullpath": "/solaris/LOP/capsule"}, " "], "role": "td", "extent": [2951, 2972], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/capsule", "type": "link", "text": ["Capsule LOP"], "fullpath": "/nodes/lop/capsule"}, " "], "role": "td", "extent": [2972, 3009], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Create or edit capsule primitives."], "extent": [3029, 3072]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/cone", "type": "link", "text": "", "fullpath": "/solaris/LOP/cone"}, " "], "role": "td", "extent": [3072, 3090], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/cone", "type": "link", "text": ["Cone LOP"], "fullpath": "/nodes/lop/cone"}, " "], "role": "td", "extent": [3090, 3121], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Create or edit cone primitives."], "extent": [3141, 3181]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/cube", "type": "link", "text": "", "fullpath": "/solaris/LOP/cube"}, " "], "role": "td", "extent": [3181, 3199], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/cube", "type": "link", "text": ["Cube LOP"], "fullpath": "/nodes/lop/cube"}, " "], "role": "td", "extent": [3199, 3230], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Create or edit cube primitives."], "extent": [3250, 3290]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/cylinder", "type": "link", "text": "", "fullpath": "/solaris/LOP/cylinder"}, " "], "role": "td", "extent": [3290, 3312], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/cylinder", "type": "link", "text": ["Cylinder LOP"], "fullpath": "/nodes/lop/cylinder"}, " "], "role": "td", "extent": [3312, 3351], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Create or edit cylinder primitives."], "extent": [3371, 3415]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/sphere", "type": "link", "text": "", "fullpath": "/solaris/LOP/sphere"}, " "], "role": "td", "extent": [3415, 3435], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/sphere", "type": "link", "text": ["Sphere LOP"], "fullpath": "/nodes/lop/sphere"}, " "], "role": "td", "extent": [3435, 3470], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Create or edit sphere primitives."], "extent": [3490, 3533]}]}], "divider": false}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Meshes"], "extent": [3533, 3546], "body": [{"type": "para", "indent": 0, "text": ["Polygons are Mesh primitives in USD. USD supports both right and left oriented meshes, though SOP geometry is left-handed by default. Meshes can also have primvars, defining attributes which can be used to drive shading graphs."], "extent": [3546, 3776]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/mesh", "type": "link", "text": "", "fullpath": "/solaris/LOP/mesh"}, " "], "role": "td", "extent": [3776, 3794], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/mesh", "type": "link", "text": ["Mesh LOP"], "fullpath": "/nodes/lop/mesh"}, " "], "role": "td", "extent": [3794, 3825], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["This node\u2019s true power lies in its Edit mode, for changing mesh properties. Subdivs can also be defined here, or with SOP attributes."], "extent": [3845, 3987]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/geometrysubsetvop", "type": "link", "text": "", "fullpath": "/solaris/LOP/geometrysubsetvop"}, " "], "role": "td", "extent": [3987, 4018], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/geometrysubsetvop", "type": "link", "text": ["Geometry Subset VOP"], "fullpath": "/nodes/lop/geometrysubsetvop"}, " "], "role": "td", "extent": [4018, 4073], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Useful for adding geometry subsets to USD meshes. Subsets can also be defined inside of SOPs, using attributes or primitive groups."], "extent": [4093, 4234]}]}], "divider": false}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["GeomSubsets"], "extent": [4234, 4254], "body": [{"type": "para", "indent": 0, "text": ["GeomSubsets appear in primitive hierarchies, but are not actually primitives themselves. They represent primitive groups, or face sets, for material assignments. When pieces of geometry don\u2019t need to independently transform or change visibility, consolidating meshes and using geomsubsets can boost performance and productivity."], "extent": [4254, 4585]}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Subdivs"], "extent": [4585, 4601], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 0, "text": [" ", {"scheme": "Image", "value": "/images/solaris/karma_geo_subdiv.jpg", "type": "link", "text": "", "fullpath": "/images/solaris/karma_geo_subdiv.jpg"}], "role": "item", "extent": [4601, 4654]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Meshes become subdivision surfaces when their ", {"type": "em", "text": ["subdivisionScheme"]}, " property is set to one of the supported schemes. Any authored normals are ignored when the subdiv is rendered. Karma supports edge and point creases."], "extent": [4654, 4871]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Scheme "], "role": "th", "extent": [4871, 4881], "container": true}, {"type": "cell", "indent": 4, "text": ["Creases "], "role": "th", "extent": [4881, 4896], "container": true}, {"type": "cell", "indent": 8, "text": ["Description "], "role": "th", "extent": [4896, 4919]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "var", "text": ["none"]}, " "], "role": "td", "extent": [4919, 4930], "container": true}, {"type": "cell", "indent": 4, "text": ["n/a "], "role": "td", "extent": [4930, 4940], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["No subdivision scheme is applied; this is the default for Mesh prims. |"], "extent": [4940, 5020]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "var", "text": ["catmullClark"]}, " "], "role": "td", "extent": [5020, 5039], "container": true}, {"type": "cell", "indent": 4, "text": ["Yes "], "role": "td", "extent": [5039, 5049], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Industry standard subdivision surfaces, good for smoothing quad-dominant meshes. |"], "extent": [5049, 5140]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "var", "text": ["loop"]}, " "], "role": "td", "extent": [5140, 5151], "container": true}, {"type": "cell", "indent": 4, "text": ["Yes "], "role": "td", "extent": [5151, 5161], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Good for smoothing triangulated meshes. |"], "extent": [5161, 5211]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"type": "var", "text": ["bilinear"]}, " "], "role": "td", "extent": [5211, 5226], "container": true}, {"type": "cell", "indent": 4, "text": ["No "], "role": "td", "extent": [5226, 5235], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Subdivides faces into quads, without any smoothing."], "extent": [5235, 5296]}]}], "divider": false}]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [5296, 5301], "body": [{"type": "para", "indent": 4, "text": ["Dicing quality can be used to control subdivision quality at render time."], "extent": [5301, 5380]}], "container": true}], "container": true, "role": "item_group"}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [5380, 5386], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Icon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/solaris/LOP/rendergeometrysettings"}, " ", {"type": "ui", "text": ["Useful Render Properties"]}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing Quality"], "role": "item", "extent": [39627, 39645], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for smooth surfaces (subdivision surfaces and displaced surfaces).  With all other parameters at their defaults, a value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."], "extent": [39706, 40088]}, {"type": "para", "indent": 4, "text": ["The effect of changing the shading quality is to increase or decrease the amount of shading by a factor of ", {"type": "code", "text": ["karma:object:dicingquality"]}, " ", {"type": "strong", "text": ["squared"]}, " - so a shading quality of 2 will perform 4 times as much shading and a shading quality of 0.5 will perform 1/4 times as much shading."], "extent": [40088, 40373]}], "container": true, "attrs": {"hprop": "karma:object:dicingquality", "kagroup": "Dicing"}, "id": "karma:object:dicingquality"}], "extent": [5409, 5528]}], "container": true, "attrs": {"display": "bordered"}}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Curves"], "extent": [5528, 5541], "body": [{"type": "para", "indent": 0, "text": ["Curves in USD are of the type ", {"type": "em", "text": ["BasisCurves"]}, ". Each primitive represents potentially many thousands of individual strands. The size of the ", {"type": "em", "text": ["curveVertexCounts"]}, " property is number of individual curves on the primitive."], "extent": [5541, 5758]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": [{"scheme": "Icon", "value": "LOP/basiscurves", "type": "link", "text": "", "fullpath": "/solaris/LOP/basiscurves"}, " "], "role": "td", "extent": [5758, 5783], "container": true}, {"type": "cell", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/lop/basiscurves", "type": "link", "text": ["BasisCurves LOP"], "fullpath": "/nodes/lop/basiscurves"}, " "], "role": "td", "extent": [5783, 5828], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["This node can create BasisCurves primitives, but it\u2019s true value lies in its Edit mode, for changing curve properties"], "extent": [5848, 5975]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["There are two types of BasisCurves: ", {"type": "strong", "text": ["Linear"]}, " and ", {"type": "strong", "text": ["Cubic"]}, "; most of the properties defined by the schema apply to cubic curves."], "extent": [5975, 6102]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [6102, 6107], "body": [{"type": "para", "indent": 4, "text": ["If the default ", {"type": "em", "text": ["Non-periodic linear"]}, " curves look almost right but you just want to smooth the curve, use ", {"type": "em", "text": ["pinned cubic bsplines"]}, ". These two flavors of curves should handle the vast majority of cases."], "extent": [6107, 6312]}], "container": true}], "container": true, "role": "item_group"}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Property "], "role": "th", "extent": [6312, 6324], "container": true}, {"type": "cell", "indent": 4, "text": ["Purpose "], "role": "th", "extent": [6324, 6339]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Curve Basis "], "role": "td", "extent": [6339, 6354], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "em", "text": ["Curve Type"]}, " is ", {"type": "strong", "text": ["Cubic"]}, ", this parameter controls how the curve is interpolated."], "extent": [6354, 6444]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "strong", "text": ["Bezier"]}, " - Curve is smoothly interpolated ", {"type": "em", "text": ["near"]}, " the vertices, and has strict vertex count requirements."], "extent": [6444, 6555]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "strong", "text": ["BSpline"]}, " - Curve is smoothly interpolated ", {"type": "em", "text": ["near"]}, " the vertices. "], "extent": [6555, 6626]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "strong", "text": ["CatmullRom"]}, " - Curve is smoothly interpolated ", {"type": "em", "text": ["through"]}, " the vertices."], "extent": [6626, 6702]}], "container": true}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Wrap "], "role": "td", "extent": [6702, 6709], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["Defines how the ends of each curve gets resolved:"], "extent": [6709, 6764]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "strong", "text": ["Non-Periodic"]}, " - Curves end without special consideration; cubic curves may end up with shortened curves, depending on the number of CVs"], "extent": [6764, 6907]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "strong", "text": ["Periodic"]}, " - Loops the curve\u2019s end back onto the beginning"], "extent": [6907, 6972]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "strong", "text": ["Pinned"]}, " - Karma will insert vertices as needed, to ensure cubic curves are valid, and that they start/end as they were modeled; use this for close-up hair such as eye-lashes"], "extent": [6972, 7154]}], "container": true}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["Curves have different per-strand vertex requirements to be valid. Incorrect topologies can be the source behind curves disappearing, or looking strange, when rendering with Karma."], "extent": [7154, 7335]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Curve "], "role": "th", "extent": [7335, 7344], "container": true}, {"type": "cell", "indent": 4, "text": ["Vertex Count (N) "], "role": "th", "extent": [7344, 7368]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Non-Periodic Linear "], "role": "td", "extent": [7368, 7390], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["N>=2"], "extent": [7390, 7399]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Periodic Linear "], "role": "td", "extent": [7399, 7417], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["N>=3"], "extent": [7417, 7426]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Periodic Bezier "], "role": "td", "extent": [7426, 7444], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["N*3"], "extent": [7444, 7452]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["Non-Periodic Bezier "], "role": "td", "extent": [7452, 7474], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["4+3*N"], "extent": [7474, 7484]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 0, "text": ["All Other Cubics "], "role": "td", "extent": [7484, 7503], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 4, "text": ["N>=4"], "extent": [7503, 7513]}]}], "divider": false}]}, {"type": "para", "indent": 0, "text": ["Karma renders curves as rounded tubes by default, but can also render them as ribbons and oriented ribbons.The curve basis can aslo be overridden at render time."], "extent": [7513, 7676]}, {"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 0, "text": [" ", {"scheme": "Image", "value": "/images/solaris/karma_geo_curves_styles.jpg", "type": "link", "text": "", "fullpath": "/images/solaris/karma_geo_curves_styles.jpg"}], "role": "item", "extent": [7676, 7735]}], "container": true, "role": "item_group"}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [7735, 7741], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Icon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/solaris/LOP/rendergeometrysettings"}, " ", {"type": "ui", "text": ["Useful Render Properties"]}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Curves As"], "role": "item", "extent": [52003, 52023], "body": [{"type": "para", "indent": 4, "text": ["When rendering curves, they can be rendered as ribbons oriented to face\n    the camera, rounded tubes or ribbons oriented to the normal attribute\n    attached to the points."], "extent": [52084, 52263]}], "container": true, "attrs": {"hprop": "karma:object:curve_style", "kagroup": "Geometry"}, "id": "karma:object:curve_style"}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Override Curves Basis"], "role": "item", "extent": [52263, 52288], "body": [{"type": "para", "indent": 4, "text": ["USD supports Curve Basis types that may not be supported directly in\n    Houdini.  In some cases, you may want to override the Houdini curve basis.\n    For example, if you have linear curves in Houdini, you may want to render\n    them with a Bezier, B-Spline or Catmull-Rom basis.  This menu will force\n    Karma to override the basis that\u2019s tied to the USD primitives."], "extent": [52349, 52724]}, {"type": "para", "indent": 4, "text": ["Note that the topology of the curves must match the target basis.  For\n    example, when selecting any cubic curve basis, every curves must have at\n    least 4 vertices.  For the Bezier basis, curves must have 4 + 3*N vertices."], "extent": [52724, 52957]}], "container": true, "attrs": {"hprop": "karma:object:curve_basis", "kagroup": "Geometry"}, "id": "karma:object:curve_basis"}], "extent": [7764, 7930]}], "container": true, "attrs": {"display": "bordered"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Particles"], "extent": [7930, 7946], "body": [{"type": "para", "indent": 0, "text": ["Particles or point clouds are represented as a ", {"type": "em", "text": ["Points"]}, " prim in USD. By default Karma renders points as sphere, but their appearance can be adjusted with Render Geometry Settings."], "extent": [7946, 8128]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [8128, 8134], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Icon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/solaris/LOP/rendergeometrysettings"}, " ", {"type": "ui", "text": ["Useful Render Properties"]}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Points As"], "role": "item", "extent": [51786, 51806], "body": [{"type": "para", "indent": 4, "text": ["When rendering point clouds, they can be rendered as camera oriented\n    discs, spheres or discs oriented to the normal attribute."], "extent": [51867, 52003]}], "container": true, "attrs": {"hprop": "karma:object:point_style", "kagroup": "Geometry"}, "id": "karma:object:point_style"}], "extent": [8157, 8274]}], "container": true, "attrs": {"display": "bordered"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Instances"], "extent": [8274, 8290], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Instancing", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["USD provides instancing in two forms:"], "extent": [18835, 18878]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Native instancing is a property that tells USD to generate a single \u201cmaster primitive\u201d in order to efficiently represent many copies of an asset. "], "extent": [18878, 19031]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Point Instancer is a special schema that allows for representing vast copies of geometry efficiently. "], "extent": [19031, 19141]}], "container": true}, {"type": "para", "indent": 4, "text": ["Both types of instances support transforming the top-level of each primitive and they also allow you to author primvars (on the native instance individually, or on the point instancer primitive) to set per-instance material properties.  Native instances are actual transforms on each instance, and each instance is represented in the scene as unique namespaces. They are easily promoted from instances to hero (you just turn their \u201cinstanceable\u201d property off). "], "extent": [19141, 19608]}, {"type": "para", "indent": 4, "text": ["Point Instancers are fast, but the transforms of all instances are set as array attributes on the point instancer primitive.  Promotion involves mutating the scene. Point instances should be preferred mostly based on the number of instances that will exist."], "extent": [19608, 19871]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Volumes"], "extent": [8332, 8346], "body": [{"type": "para", "indent": 4, "text": ["In USD, a \u201cvolume\u201d is essentially a set of named \u201cfields\u201d that are rendered together as a unit.  So a volume ", {"scheme": null, "value": "#prim", "type": "link", "text": ["prim"], "fullpath": "/solaris/glossary#prim", "fragment": "#prim"}, " ", {"type": "code", "text": ["/campsite/fire"]}, " would say that it is made up of a field named \u201cdensity\u201d found at ", {"type": "code", "text": ["/campsite/fire/density"]}, ", and a field named \u201ctemperature\u201d found at ", {"type": "code", "text": ["/campsite/fire/temp"]}, ". Each one of these fields equivalent to a singleVolume or VDB primitive in SOPs."], "extent": [48149, 48528]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [8384, 8390], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Icon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/solaris/LOP/rendergeometrysettings"}, " ", {"type": "ui", "text": ["Useful Render Properties"]}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Limit"], "role": "item", "extent": [46982, 46998], "body": [{"type": "para", "indent": 4, "text": ["The number of times a volumetric ray can propagate through a scene. It functions in a similar fashion to the ", {"type": "ui", "text": ["Diffuse Limit"]}, " parameter."], "extent": [47057, 47200]}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimit.jpg", "type": "link", "text": "", "fullpath": "/images/render/mug/limits_tab/VolumeLimit.jpg"}], "extent": [47200, 47259]}, {"type": "para", "indent": 4, "text": ["Increasing the Volume Limit parameter will result in much more realistic volumetric effects. This is especially noticeable in situations where only part of a volume is receiving direct lighting. Also, in order for a volumetric object to receive indirect light from other objects, the Volume Limit parameter must be set above 0."], "extent": [47259, 47592]}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/limits_tab/VolumeLimitCompare.jpg", "type": "link", "text": "", "fullpath": "/images/render/mug/limits_tab/VolumeLimitCompare.jpg"}], "extent": [47592, 47658]}, {"type": "para", "indent": 4, "text": ["With the Volume Limit set to values above zero, the fog volume takes on the characteristic light scattering you would expect from light traveling through a volume. However, as with the Diffuse Limit, the light contribution generally decreases with each bounced ray and therefore using values above 4 does not necessarily result in a noticeably more realistic image."], "extent": [47658, 48029]}, {"type": "para", "indent": 4, "text": ["Also, increasing the value of this parameter can dramatically increase the amount of time spent rendering volumetric images."], "extent": [48029, 48159]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "role": "item", "extent": [43910, 43920], "body": [{"type": "para", "indent": 8, "text": ["This is a float because all limits are stochastically picked per-sample, so for example you can set the diffuse limit to ", {"type": "code", "text": ["3.25"]}, " and have 25% of the rays with a diffuse limit of 4 and 75% of rays with a diffuse limit of 3."], "extent": [43952, 44183]}], "container": true, "attrs": {"id": "stochastic_limits"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "karma:object:volumelimit", "kagroup": "Limits"}, "id": "karma:object:volumelimit"}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Samples"], "role": "item", "extent": [42059, 42077], "body": [{"type": "para", "indent": 4, "text": ["Specifies the quality of indirect volumetric shading.  A value of one\n    translates to roughly one additional volumetric sample per shading\n    computation.  A sample of 4 translates to roughly 4 additional volumetric\n    samples per shading computation."], "extent": [42140, 42401]}], "container": true, "attrs": {"hprop": "karma:object:volumesamples", "kagroup": "Sampling"}, "id": "karma:object:volumesamples"}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Step Rate"], "role": "item", "extent": [48436, 48456], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/sampling_tab/VolumeQuality.jpg", "type": "link", "text": "", "fullpath": "/images/render/mug/sampling_tab/VolumeQuality.jpg"}], "extent": [48520, 48583]}, {"type": "para", "indent": 4, "text": ["How finely or coarsely a volume is sampled as a ray travels through it.\n    Volumetric objects are made up of 3d structures called Voxels, the\n    value of this parameter represents the number of voxels a ray will\n    travel through before performing another sample."], "extent": [48583, 48855]}, {"type": "para", "indent": 4, "text": ["The default value is ", {"type": "code", "text": ["0.25"]}, ", which means that every one of every four\n    voxels will be sampled. A value of ", {"type": "code", "text": ["1"]}, " would mean that all voxels are\n    sampled and a value of 2 would mean that all voxels are sampled twice. This\n    means that the volume step rate value behaves in a similar way to pixel\n    samples, acting as a multiplier on the total number of samples for\n    volumetric objects."], "extent": [48855, 49255]}, {"type": "para", "indent": 4, "text": ["Keep in mind that increasing the volume step rate can dramatically increase\n    render times, so it should only be adjusted when necessary. Also, while\n    increasing the default from ", {"type": "code", "text": ["0.25"]}, " can reduce volumetric noise, increasing\n    the value beyond ", {"type": "code", "text": ["1"]}, " will rarely see similar results."], "extent": [49255, 49549]}], "container": true, "attrs": {"hprop": "karma:object:volumesteprate", "kagroup": "Sampling"}, "id": "karma:object:volumesteprate"}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume Velocity Blur Scale"], "role": "item", "extent": [51062, 51092], "body": [{"type": "para", "indent": 4, "text": ["Velocity multiplier used to reduce or exaggerate amount of motion blur on\n    volumes."], "extent": [51161, 51253]}], "container": true, "attrs": {"hprop": "karma:object:volumevblurscale", "kagroup": "Motion Blur"}, "id": "karma:object:volumevblurscale"}], "extent": [8413, 8687]}], "container": true, "attrs": {"display": "bordered"}}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Uniform Volumes"], "extent": [8687, 8711], "body": [{"type": "para", "indent": 0, "text": ["Surface geometry  can be rendered as a uniform volume using these render properties. The density is controlled with the render property below, but you can control the color using ", {"type": "code", "text": ["displayColor"]}, "."], "extent": [8711, 8908]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [8908, 8914], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Icon", "value": "LOP/rendergeometrysettings", "type": "link", "text": "", "fullpath": "/solaris/LOP/rendergeometrysettings"}, " ", {"type": "ui", "text": ["Useful Render Properties"]}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume"], "role": "item", "extent": [49549, 49567], "body": [{"type": "para", "indent": 4, "text": ["Whether to render this object as if it was a uniform-density volume. Using\n    this property on surface geometry is more efficient than actually creating\n    a volume object of uniform density, since the renderer can assume that the\n    volume density is uniform and place samples more optimally. The surface\n    normal of the surface is used to determine which side of the surface will\n    render as a volume - the normal will point away from the interior. The\n    surface need not be closed - if the surface is not closed, the volume will\n    extend an infinite distance away from the surface. Non-closed surfaces may\n    produce unexpected results near the edge of the surface, so try to keep the\n    viewing camera away from the edges."], "extent": [49636, 50381]}], "container": true, "attrs": {"hprop": "karma:object:volumeuniform", "kagroup": "Uniform Volume"}, "id": "karma:object:volumeuniform"}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume Density"], "role": "item", "extent": [50381, 50407], "body": [{"type": "para", "indent": 4, "text": ["Determines how the samples are distributed when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled). This parameter must match the\n    density on the uniform volume shader in order to produce correct results."], "extent": [50483, 50718]}], "container": true, "attrs": {"hprop": "karma:object:volumeuniformdensity", "kagroup": "Uniform Volume"}, "id": "karma:object:volumeuniformdensity"}, "\n    ", {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Uniform Volume Samples"], "role": "item", "extent": [50718, 50744], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to generate when rendering a uniform volume\n    (", {"type": "code", "text": ["karma:object:volumeuniform"]}, " is enabled).  The samples will be distributed\n    so as to produce an equal image contribution if they were all equal in\n    brightness."], "extent": [50820, 51062]}], "container": true, "attrs": {"hprop": "karma:object:volumeuniformsamples", "kagroup": "Uniform Volume"}, "id": "karma:object:volumeuniformsamples"}], "extent": [8937, 9172]}], "container": true, "attrs": {"display": "bordered"}}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How To"], "extent": [9172, 9185], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" Edit a primitive from the Viewer or Scene Graph Tree"], "role": "item", "extent": [9185, 9248], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Select a primitive in the Viewer or Scene Graph Tree"], "extent": [9248, 9308]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"keys": ["RMB"], "type": "keys", "text": null}, " on the primitive in the Viewer or Scene Graph Tree, go to ", {"type": "ui", "text": ["Edit Primitive \u25b8 New node to edit primitive\u2026"]}], "extent": [9308, 9432]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["This will create an Edit node that corresponds to the primitive type selected."], "extent": [9432, 9518]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "text": [" "], "role": "item", "extent": [9518, 9528], "body": [{"type": "para", "indent": 8, "text": ["Instead of selecting ", {"type": "em", "text": ["New node\u2026"]}, " you can choose ", {"type": "em", "text": ["Jump to node\u2026"]}, " and re-edit the Houdini node that either created or edited the primitive in this scene."], "extent": [9528, 9693]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Edit a specific property from the Scene Graph Details pane"], "role": "item", "extent": [9693, 9761], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Select a primitive in the Viewer or Scene Graph Tree"], "extent": [9761, 9821]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the Scene Graph Details panel, ", {"keys": ["RMB"], "type": "keys", "text": null}, " on the property or properties, and click ", {"type": "em", "text": ["Edit Property"]}, "."], "extent": [9821, 9928]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["This will create an Edit Properties in your node graph, configured to edit the selected properties on your primitive."], "extent": [9928, 10053]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Edit many primitives via their inherited class"], "role": "item", "extent": [10053, 10109], "body": [{"type": "para", "indent": 4, "text": ["Multiple primitives which ", {"scheme": null, "value": "/solaris/glossary#inherit", "type": "link", "text": ["inherit"], "fullpath": "/solaris/glossary#inherit", "fragment": "#inherit"}, " from a single ", {"scheme": null, "value": "/class/glossary#class", "type": "link", "text": ["schema"], "fullpath": "/class/glossary#class", "fragment": "#class"}, " prim can be edited at the same time. Assets made using the ", {"scheme": null, "value": "/solaris/component_builder", "type": "link", "text": ["Component Builder"], "fullpath": "/solaris/component_builder"}, " inherit from a class prim by default."], "extent": [10109, 10365]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Select a primitive in the Viewer or Scene Graph Tree"], "extent": [10365, 10425]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"keys": ["RMB"], "type": "keys", "text": null}, " on the primitive in the Viewer or Scene Graph Tree, go to ", {"type": "ui", "text": ["Edit Primitive \u25b8 New node to edit primitive\u2026"]}], "extent": [10425, 10549], "body": [{"type": "para", "indent": 6, "text": ["This option only shows up if the prim already has an inherits setup."], "extent": [10549, 10625]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["This will create an Edit node, setup to edit the primitive via the inherited class primitive."], "extent": [10625, 10724]}], "container": true}], "container": true}], "container": true, "role": "item_group"}]}], "title": [{"type": "supertitle", "text": ["Karma"]}, " Geometry"], "included": ["/props/karma", "/solaris/glossary", "/solaris/kug"]}