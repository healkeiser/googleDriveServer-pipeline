{"type": "root", "attrs": {}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["LOPs and USD Glossary"], "extent": [0, 26]}, {"type": "block_def_group", "body": [{"ext": null, "type": "block_def", "indent": 0, "text": ["usd"], "role": "item", "extent": [26, 43], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#{{tag}}", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true}], "container": true, "role": "item_group"}, {"level": 2, "id": "introduction", "container": true, "type": "h", "indent": 0, "text": ["Introduction"], "extent": [141, 175], "body": [{"type": "para", "indent": 0, "text": ["The following is a glossary of terms related to LOPS and USD in general.  "], "extent": [175, 260]}, {"type": "para", "indent": 0, "text": ["The full Pixar USD documentation can be found ", {"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html", "type": "link", "text": ["here"], "exists": true}, ".  "], "extent": [260, 371]}, {"type": "para", "indent": 0, "text": ["This document has been produced to aid Houdini users in finding and understanding the most common USD terms and will help to clarify any overlap in terms that occur in both USD and Houdini.  Each heading starts with a link to the Pixar USD docs.  If there is no text under a heading we consider this term to be ", {"type": "strong", "text": ["not"]}, " among the most-common terms.  If there is no USD link, the term is not a USD term, but a Houdini or explanatory term.  "], "extent": [371, 809]}]}, {"level": 1, "id": "glossary", "container": true, "type": "glossary_section", "indent": 0, "role": "section", "extent": [809, 819], "body": [{"type": "glossary_item_group", "body": [{"ext": null, "type": "glossary_item", "indent": 0, "text": [" Active / Inactive"], "role": "item", "extent": [819, 842], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Active/Inactive", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A non-destructive behavior that allows you to \u201cprune\u201d prims (and their children) from a stage.  You do this on a composed stage (on the fly).  By default all prims are active.  It is similar to the concept of the Houdini display flag on object nodes.  "], "extent": [922, 1184]}, {"type": "para", "indent": 4, "text": ["An important characteristic of USD ", {"scheme": null, "value": "#prim", "type": "link", "text": ["prims"], "fullpath": "/solaris/glossary#prim", "fragment": "#prim"}, " is they cannot be permanently deleted from a composed stage, (mostly because once something is on the stage, anyone may reference it to drive something).  USD does support deactivation, which is a non-destructive deletion. Activation is another opinion, meaning it will be resolved through composition. "], "extent": [1184, 1542]}, {"type": "para", "indent": 4, "text": ["This is often used to visualize the scene without some affect, for example removing scene lighting to see character-specific lights better.  Just like in Houdini, activation and display are different concepts.  However, in Houdini, turning off the display of a light does not effect the light\u2019s contribution to a scene.  In LOPs/USD, turning off the display of a light ", {"type": "strong", "text": ["does"]}, " actually turn off its contribution."], "extent": [1542, 1959]}, {"type": "para", "indent": 4, "text": ["In LOPS, use the ''Configure Layer'' or the ''Prune LOP'' to set activation."], "extent": [1959, 2041]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#muting", "type": "link", "text": ["\u201cmuting\u201d"], "fullpath": "/solaris/glossary#muting", "fragment": "#muting"}, " and ", {"scheme": null, "value": "#visibility", "type": "link", "text": ["\u201cvisibility\u201d"], "fullpath": "/solaris/glossary#visibility", "fragment": "#visibility"}, "."], "extent": [2041, 2118]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [2118, 2128], "body": [{"type": "para", "indent": 12, "text": ["HOUDINI NOTE:  The point attribute \u201cactive\u201d is used in Houdini Bullet RBD sims to control active and inactive objects.  "], "extent": [2128, 2262]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "active"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Active Layer"], "role": "item", "extent": [2262, 2279], "body": [{"type": "para", "indent": 4, "text": ["Most LOP nodes perform edits to data on the USD stage copied from their first input. These edits are created in the \u201cactive layer\u201d, which is always the strongest sublayer on the root layer of the LOP node\u2019s stage. "], "extent": [2301, 2522]}], "container": true, "attrs": {"id": "activelayer"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Alembic"], "role": "item", "extent": [2522, 2534], "body": [{"type": "para", "indent": 4, "text": ["Although not part of USD at all, Alembic support is included in USD.  However, USD is not \u201calembic but faster.\u201d  USD does comes with its own format that can store data, but it is a much wider scene description with ways to describe variations, layers, nested sub layers, different display purposes, plus the ability to define your own data formats."], "extent": [2552, 2906]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#usd", "type": "link", "text": ["\u201cUSD\u201d"], "fullpath": "/solaris/glossary#usd", "fragment": "#usd"}, " and ", {"scheme": null, "value": "#lops", "type": "link", "text": ["LOPS"], "fullpath": "/solaris/glossary#lops", "fragment": "#lops"}, "."], "extent": [2906, 2951]}], "container": true, "attrs": {"id": "alembic"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" API Schema"], "role": "item", "extent": [2951, 2966], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-APISchema", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Choose to create an API Schema when you have a group of related properties, metadata, and possibly associated behaviors that may need to be applied to multiple different types of prims.  For example, if your pipeline has a set of three attributes that get authored onto every gprim, and you want to have a robust schema for authoring and extracting those attributes, you could create an API schema for them. "], "extent": [3047, 3465]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#schema", "type": "link", "text": [{"type": "q", "text": ["schema"]}], "fullpath": "/solaris/glossary#schema", "fragment": "#schema"}, "."], "extent": [3465, 3499]}], "container": true, "attrs": {"id": "apischema"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" AOV"], "role": "item", "extent": [3499, 3507], "body": [{"type": "para", "indent": 4, "text": ["An AOV is an ", {"type": "q", "text": ["auxiliary output variable,"]}, " and although not a USD term, it is an accepted industry term to describe what have traditionally been called ", {"type": "q", "text": ["Extra Image Planes"]}, " in Houdini.  In the LOPs context we will refer to these as AOVs, but you will still see ", {"type": "q", "text": ["extra image planes"]}, " elsewhere in Houdini.  "], "extent": [3521, 3831]}, {"type": "para", "indent": 4, "text": ["An AOV is an rendered image that isolates one part of the rendering process (EX:  diffuse contribution, specular contribution) or some arbitrary data (EX:  ID, depth, velocity).  These are created at render time during the rendering of the ", {"type": "q", "text": ["beauty"]}, " pass and can be saved as individual files or exr layers.  "], "extent": [3831, 4144]}, {"type": "para", "indent": 4, "text": ["AOVs may also be referred to as an ", {"type": "q", "text": ["arbout"]}, " (arbitrary output), a ", {"type": "q", "text": ["deep raster,"]}, " or ", {"type": "q", "text": ["rendervars."]}, "  AOVs are not to be confused with ", {"type": "q", "text": ["render passes"]}, " which are completely separate renders, (which might include AOVs as well)."], "extent": [4144, 4372]}], "container": true, "attrs": {"id": "aov"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Assembly"], "role": "item", "extent": [4372, 4385], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Assembly", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Assemblies are group models, i.e. models that aggregate other models into meaningful collections.  An assembly may consist primarily of references to other models, and themselves be published assets."], "extent": [4460, 4665]}, {"type": "para", "indent": 4, "text": [{"scheme": null, "value": "#assembly", "type": "link", "text": ["Assemblies"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, ", ", {"scheme": null, "value": "#group", "type": "link", "text": ["groups"], "fullpath": "/solaris/glossary#group", "fragment": "#group"}, ", ", {"scheme": null, "value": "#component", "type": "link", "text": ["components"], "fullpath": "/solaris/glossary#component", "fragment": "#component"}, " and ", {"scheme": null, "value": "#subcomponent", "type": "link", "text": ["sub-components"], "fullpath": "/solaris/glossary#subcomponent", "fragment": "#subcomponent"}, " are organizational frameworks to help you manage your stage.  Let\u2019s look at the example kitchen scene that ships with USD and with Houdini.  In this scene we have a kitchen with many other pieces of furniture, appliances, etc.  It is obviously beneficial to group these pieces in a way that makes sense in everyday language.  "], "extent": [4665, 5097]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Organizational Name "], "role": "th", "extent": [5097, 5124], "container": true}, {"type": "cell", "indent": 8, "text": ["Example "], "role": "th", "extent": [5124, 5144], "container": true}, {"type": "cell", "indent": 12, "text": ["Model Kind? "], "role": "th", "extent": [5144, 5171], "container": true}, {"type": "cell", "indent": 20, "text": ["Set Draw Mode? "], "role": "th", "extent": [5171, 5209], "container": true}, {"type": "cell", "indent": 28, "text": ["Can Contain Kinds? "], "role": "th", "extent": [5209, 5259]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Assembly "], "role": "td", "extent": [5259, 5274], "container": true}, {"type": "cell", "indent": 12, "text": ["Kitchen "], "role": "td", "extent": [5274, 5296], "container": true}, {"type": "cell", "indent": 20, "text": ["Yes \u2714"], "role": "td", "extent": [5296, 5323], "container": true}, {"type": "cell", "indent": 28, "text": ["Yes \u2714"], "role": "td", "extent": [5323, 5366], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 36, "text": ["Assembly, Group, Component \u2714"], "extent": [5366, 5460]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Group"], "role": "td", "extent": [5460, 5471], "container": true}, {"type": "cell", "indent": 12, "text": ["Dining Table"], "role": "td", "extent": [5471, 5497], "container": true}, {"type": "cell", "indent": 20, "text": ["Yes \u2714"], "role": "td", "extent": [5497, 5524], "container": true}, {"type": "cell", "indent": 28, "text": ["Yes \u2714"], "role": "td", "extent": [5524, 5559], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 36, "text": ["Group, Component \u2714"], "extent": [5559, 5615]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Component"], "role": "td", "extent": [5615, 5630], "container": true}, {"type": "cell", "indent": 12, "text": ["Chair 1"], "role": "td", "extent": [5630, 5651], "container": true}, {"type": "cell", "indent": 20, "text": ["Yes \u2714"], "role": "td", "extent": [5651, 5678], "container": true}, {"type": "cell", "indent": 28, "text": ["Yes \u2714"], "role": "td", "extent": [5678, 5713], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 36, "text": ["Subcomponent \u2714"], "extent": [5713, 5765]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Sub-component"], "role": "td", "extent": [5765, 5784], "container": true}, {"type": "cell", "indent": 12, "text": ["Chair 1 Cushion"], "role": "td", "extent": [5784, 5813], "container": true}, {"type": "cell", "indent": 20, "text": ["No \u292c"], "role": "td", "extent": [5813, 5839], "container": true}, {"type": "cell", "indent": 28, "text": ["No \u292c"], "role": "td", "extent": [5839, 5873], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 36, "text": ["No \u292c"], "extent": [5873, 5944]}]}], "divider": false}]}, {"type": "para", "indent": 4, "text": ["You cannot put anything under a sub-component.  Sub-components may have leaves, (individual polys that make up the cushion for example).  You also cannot set the draw mode on a subcomponent, (shaded, wireframe, bounding box).  "], "extent": [5944, 6177]}, {"type": "para", "indent": 4, "text": ["In USD an assembly is a kind of Model.  "], "extent": [6177, 6223]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#model", "type": "link", "text": ["\u201cmodel\u201d"], "fullpath": "/solaris/glossary#model", "fragment": "#model"}, " to understand what a ", {"type": "q", "text": ["model kind"]}, " is.  "], "extent": [6223, 6295]}], "container": true, "attrs": {"id": "assembly"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Asset"], "role": "item", "extent": [6295, 6305], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Asset", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Asset is a fairly common organizational concept in content-producing pipelines.  Assets can be a single file (e.g. a UV texture), or a collection of files anchored by a single file that in turn references others.  An important quality of assets is that they are generally published and version-controlled.  The ascii USD format uses a special syntax for asset-valued strings to make them easily differentiable from ordinary strings, using the ", {"type": "q", "text": ["@"]}, " symbol instead of quotes to delimit their values. See ", {"scheme": null, "value": "#assetinfo", "type": "link", "text": ["AssetInfo"], "fullpath": "/solaris/glossary#assetinfo", "fragment": "#assetinfo"}, " for an example."], "extent": [6374, 6919]}], "container": true, "attrs": {"id": "asset"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" AssetInfo"], "role": "item", "extent": [6919, 6933], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-AssetInfo", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Coming soon"], "extent": [7010, 7027]}], "container": true, "attrs": {"id": "assetinfo"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Asset Resolution"], "role": "item", "extent": [7027, 7048], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-AssetResolution", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "assetresolution"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Attribute"], "role": "item", "extent": [7139, 7153], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Attribute", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Attributes are the most common type of property authored in most USD scenes.  An attribute, (like in the rest of Houdini) is simply some sort of value (such as a color, a float, a transform matrix, or an array of values). Attributes can be animated, with each time sample stored in an array.  "], "extent": [7230, 7533]}, {"type": "para", "indent": 4, "text": ["Attributes resolve according to ", {"type": "q", "text": ["strongest wins"]}, " rules, so all values for any given attribute will be fetched from the strongest PrimSpec.  For example, a ", {"type": "q", "text": ["weak layer"]}, " with a default value will be masked by a stronger layer with animation.  This would be the case where the layout department places a prop in the scene, and later the animation department animates that prop.  "], "extent": [7533, 7919]}, {"type": "para", "indent": 4, "text": ["If you ask USD for the value at the ", {"type": "q", "text": ["default"]}, " time, it will return the default value if one is set, otherwise it will return an empty value. All time sample values are ignored.  If you ask for a value at any other time, and there is any default or time sampled value set, you will get back a value.  This value may be the default (if you request the value for a time before the first time sample), the closest time sample value, or a linear interpolation of the two surrounding time samples."], "extent": [7919, 8426]}], "container": true, "attrs": {"id": "attribute"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Attribute Block"], "role": "item", "extent": [8426, 8446], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-attributeblock", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "attributeblock"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Attribute Connection"], "role": "item", "extent": [8535, 8560], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-attributeconnection", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "attributeconnection"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Attribute Variability"], "role": "item", "extent": [8660, 8686], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-attributevariability", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "attributevariability"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Change Processing"], "role": "item", "extent": [8788, 8810], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-changeprocessing", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "changeprocessing"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Class"], "role": "item", "extent": [8904, 8914], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Class", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "class"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Clips"], "role": "item", "extent": [8991, 9001], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Clips", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "clips"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Collection"], "role": "item", "extent": [9077, 9092], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Collection", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["USD Collections can be thought of as groups for prims, and LOPs has a few mechanisms to make working with collections convenient, some of which are covered in the ", {"scheme": null, "value": "#targetpatterns", "type": "link", "text": ["Target Patterns"], "fullpath": "/solaris/glossary#targetpatterns", "fragment": "#targetpatterns"}, " section.  They are similar to Houdini bundles.  "], "extent": [9171, 9422]}, {"type": "para", "indent": 4, "text": ["A collection consists of a separate ", {"type": "q", "text": ["Include"]}, " and ", {"type": "q", "text": ["Exclude"]}, " list."], "extent": [9422, 9493]}], "container": true, "attrs": {"id": "collection"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Component"], "role": "item", "extent": [9493, 9507], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Component", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["In USD a component is a ", {"type": "q", "text": ["leaf"]}, " kind of Model.  Components can contain subcomponents, but no other ", {"scheme": null, "value": "#model", "type": "link", "text": ["models"], "fullpath": "/solaris/glossary#model", "fragment": "#model"}, " children.  "], "extent": [9584, 9715]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, " for an explanation of ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, ", ", {"scheme": null, "value": "#group", "type": "link", "text": ["group"], "fullpath": "/solaris/glossary#group", "fragment": "#group"}, ", ", {"scheme": null, "value": "#component", "type": "link", "text": ["component"], "fullpath": "/solaris/glossary#component", "fragment": "#component"}, " and ", {"scheme": null, "value": "#subcomponent", "type": "link", "text": ["sub component"], "fullpath": "/solaris/glossary#subcomponent", "fragment": "#subcomponent"}, ".  "], "extent": [9715, 9871]}], "container": true, "attrs": {"id": "component"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Composition"], "role": "item", "extent": [9871, 9887], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Composition", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Composition is the process that assembles multiple layers together by the composition arcs that relate them to each other.  Composition occurs when first opening a UsdStage, when loading or unloading prims on the stage, and when layers that contribute to the stage are edited. "], "extent": [9968, 10251]}, {"type": "para", "indent": 4, "text": ["We also sometimes refer to ", {"type": "q", "text": ["a composition"]}, " or ", {"type": "q", "text": ["a composed prim"]}, " or ", {"type": "q", "text": ["a composed scene"]}, ", in which contexts we are referring to the result of performing composition."], "extent": [10251, 10419]}, {"type": "para", "indent": 4, "text": ["In LOPS, the Composition tab in the Scene Graph Details will show all composition arcs contributing to a prim/attribute, which are known as ", {"scheme": null, "value": "#primstacks", "type": "link", "text": ["\"PrimStacks"], "fullpath": "/solaris/glossary#primstacks", "fragment": "#primstacks"}, " and ", {"scheme": null, "value": "#propertystacks", "type": "link", "text": ["\"PropertyStacks"], "fullpath": "/solaris/glossary#propertystacks", "fragment": "#propertystacks"}, " respectively.  PrimStacks / PropertyStacks are a bit different from ", {"scheme": null, "value": "#layerstacks", "type": "link", "text": ["Layer Stacks"], "fullpath": "/solaris/glossary#layerstacks", "fragment": "#layerstacks"}, ", though similar in principle.  "], "extent": [10419, 10756]}, {"type": "para", "indent": 4, "text": ["Composition in USD is a pretty deep topic, so don\u2019t be surprised when it takes a while before concepts start to sink in. You can get an awful lot of mileage out of ", {"scheme": null, "value": "#sublayers", "type": "link", "text": ["Sublayers"], "fullpath": "/solaris/glossary#sublayers", "fragment": "#sublayers"}, ", ", {"scheme": null, "value": "#references", "type": "link", "text": ["References"], "fullpath": "/solaris/glossary#references", "fragment": "#references"}, "/", {"scheme": null, "value": "#payloads", "type": "link", "text": ["Payloads"], "fullpath": "/solaris/glossary#payloads", "fragment": "#payloads"}, ", and ", {"scheme": null, "value": "#variantsets", "type": "link", "text": ["VariantSets"], "fullpath": "/solaris/glossary#variantsets", "fragment": "#variantsets"}, ".  While it\u2019s good to understand all of the composition arcs, these three are definitely the most frequently encountered.  Here are the arcs from strongest to weakest:"], "extent": [10756, 11193]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": [{"scheme": null, "value": "#layerstack", "type": "link", "text": ["Layer Stack"], "fullpath": "/solaris/glossary#layerstack", "fragment": "#layerstack"}], "extent": [11193, 11225]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"scheme": null, "value": "#inherits", "type": "link", "text": ["Inherits "], "fullpath": "/solaris/glossary#inherits", "fragment": "#inherits"}, " "], "extent": [11225, 11254]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"scheme": null, "value": "#variantsets", "type": "link", "text": ["VariantSets "], "fullpath": "/solaris/glossary#variantsets", "fragment": "#variantsets"}, " "], "extent": [11254, 11289]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"scheme": null, "value": "#references", "type": "link", "text": ["References "], "fullpath": "/solaris/glossary#references", "fragment": "#references"}], "extent": [11289, 11321]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"scheme": null, "value": "#payload", "type": "link", "text": ["Payload "], "fullpath": "/solaris/glossary#payload", "fragment": "#payload"}, " "], "extent": [11321, 11348]}, {"blevel": 6, "type": "ord", "indent": 4, "text": [{"scheme": null, "value": "#specializes", "type": "link", "text": ["Specializes "], "fullpath": "/solaris/glossary#specializes", "fragment": "#specializes"}, " "], "extent": [11348, 11384]}], "container": true}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#livrps", "type": "link", "text": ["LIVRPS Strength Ordering"], "fullpath": "/solaris/glossary#livrps", "fragment": "#livrps"}, ".  "], "extent": [11384, 11436]}], "container": true, "attrs": {"id": "composition"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Composition Arcs"], "role": "item", "extent": [11436, 11457], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-CompositionArcs", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Composition arcs are the ", {"type": "q", "text": ["operators"]}, " that allow USD to create rich compositions of many layers where stronger layers override weaker layers.  The six kinds of arcs are subLayers, inherits, variantSets, references, payloads, and specializes.  "], "extent": [11546, 11794]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#composition", "type": "link", "text": ["composition"], "fullpath": "/solaris/glossary#composition", "fragment": "#composition"}, ".  "], "extent": [11794, 11838]}], "container": true, "attrs": {"id": "compositionarcs"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Connection"], "role": "item", "extent": [11838, 11853], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Connection", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "connection"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Context Options"], "role": "item", "extent": [11934, 11954], "body": [{"type": "para", "indent": 4, "text": ["Context Options are special variables that can be used to alter the context of a LOP network. For example, one could use these to switch a graph between several different shots or for wedging different lighting setups. Context options can be global, or special blocks can be setup in the network, to locally set context options. ForEach LOPs can be thought of as a specialized flavor of context options."], "extent": [11979, 12389]}], "container": true, "attrs": {"id": "contextoptions"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Crate File Format"], "role": "item", "extent": [12389, 12411], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-CrateFileFormat", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["The binary form of a USD file:  ", {"type": "code", "text": [".usdc"]}, ".  Note the ", {"type": "q", "text": [".usd"]}, " file format is special, as files with that extension can be either crate or ascii files.  You can convert between file formats using ", {"scheme": null, "value": "#usdcat", "type": "link", "text": ["usdcat"], "fullpath": "/solaris/glossary#usdcat", "fragment": "#usdcat"}, "."], "extent": [12500, 12714]}], "container": true, "attrs": {"id": "cratefileformat"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Def"], "role": "item", "extent": [12714, 12722], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Def", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "def"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Default Value"], "role": "item", "extent": [12789, 12807], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-DefaultValue", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "defaultvalue"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Delegate"], "role": "item", "extent": [12892, 12905], "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "#hydra", "type": "link", "text": ["\u201chydra\u201d"], "fullpath": "/solaris/glossary#hydra", "fragment": "#hydra"}, "."], "extent": [12924, 12959]}], "container": true, "attrs": {"id": "delegate"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Direct Opinion"], "role": "item", "extent": [12959, 12978], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-DefaultValue", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "directopinion"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Draw Mode"], "role": "item", "extent": [13064, 13078], "body": [{"type": "para", "indent": 4, "text": ["In CG in general the ", {"type": "q", "text": ["draw mode"]}, " would be the way geometry is drawn to the viewport, (wireframe, shaded, etc).  In USD it is a piece of metadata you can set on primitives that are in a valid Kind Model hierarchy to control whether that prim and its children are drawn as full geometry, bounding boxes, textured cards, or axes at the prim\u2019s origin."], "extent": [13097, 13450]}], "container": true, "attrs": {"id": "drawmode"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" EditTarget"], "role": "item", "extent": [13450, 13465], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-EditTarget", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "edittarget"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Explicit Layers"], "role": "item", "extent": [13545, 13565], "body": [{"type": "para", "indent": 4, "text": ["An explicit layer is a USD layer created during the processing of a LOP Network as a result of the user asking for a new layer to be created. This includes layers created after a Layer Configure node set to ", {"type": "q", "text": ["Start New Layer"]}, ", or where a save path has been set.  Explicit layers will not be combined with other layers during USD output, except in Flatten All Layers or Flatten Stage mode."], "extent": [13594, 13987]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#implicitlayers", "type": "link", "text": ["Implicit Layer"], "fullpath": "/solaris/glossary#implicitlayers", "fragment": "#implicitlayers"}, "."], "extent": [13987, 14036]}], "container": true, "attrs": {"id": "explicitLayers"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Fallback"], "role": "item", "extent": [14036, 14049], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Fallback", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "fallback"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" File Formats"], "role": "item", "extent": [14126, 14143], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": [".usda"]}, ": ascii (human readable form usually used for department or high level layers) "], "extent": [14326, 14419]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": [".usdc"]}, ": binary ", {"scheme": null, "value": "#cratefileformat", "type": "link", "text": ["Crate"], "fullpath": "/solaris/glossary#cratefileformat", "fragment": "#cratefileformat"}, " (fastest to read and write, usually used for large caches)"], "extent": [14419, 14525]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": [".usd"]}, ": can be either of the above"], "extent": [14525, 14567]}], "container": true}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Note"], "extent": [14567, 14578], "body": [{"type": "para", "indent": 12, "text": ["You can use the ", {"type": "code", "text": ["usdcat"]}, " utility to convert between file formats."], "extent": [14578, 14657]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Fx artists may also be interested to know that for any of the above you can store time samples of your choosing ( 1,2 ,3 4.. or 1.25, 1.50,1.75,2.0).  You can also choose if you save each time sample in separate files or in one file for a sequence of samples."], "extent": [14657, 14922]}], "container": true, "attrs": {"id": "fileformats"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Flatten"], "role": "item", "extent": [14922, 14934], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Flatten", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Flattening refers to combining multiple USD layers into a single USD layer that is, once composed, equivalent to the original set of layers.  USD is capable of two different methods of flattening.  In Layer Flattening, the layers are flattened together prior to composing the layers. This means that composition arcs like references and variants continue to exist in the flattened layer. The other form is stage flattening, in which the composed stage is flattened, with all composition arcs already applied. This means the contents of all referenced or payload files are combined into the single generated layer. Variant and other internal arcs are hardened to their current values, making it impossible to know that a primitive ever had a variant arc."], "extent": [15010, 15769]}], "container": true, "attrs": {"id": "flatten"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Graft"], "role": "item", "extent": [15769, 15779], "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "#references", "type": "link", "text": ["references"], "fullpath": "/solaris/glossary#references", "fragment": "#references"}, "."], "extent": [15795, 15830]}], "container": true, "attrs": {"id": "graft"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Gprim"], "role": "item", "extent": [15830, 15840], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Gprim", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Gprim comes from Pixar\u2019s Renderman terminology, and is a contraction for ", {"type": "q", "text": ["Geometric primitive"]}, ", which is to say, any primitive whose imaging/rendering will directly cause something to be drawn."], "extent": [15909, 16109]}], "container": true, "attrs": {"id": "gprim"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Group"], "role": "item", "extent": [16109, 16119], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Group", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Groups are models that aggregate other models into meaningful collections.  They are the ", {"type": "q", "text": ["glue"]}, " that holds a model hierarchy together.  A group has no geometry of its own, it is a container for other models, similar to object subnets in Houdini.  "], "extent": [16188, 16441]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, " for an explanation of ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, ", ", {"scheme": null, "value": "#group", "type": "link", "text": ["group"], "fullpath": "/solaris/glossary#group", "fragment": "#group"}, ", ", {"scheme": null, "value": "#component", "type": "link", "text": ["component"], "fullpath": "/solaris/glossary#component", "fragment": "#component"}, " and ", {"scheme": null, "value": "#subcomponent", "type": "link", "text": ["sub component"], "fullpath": "/solaris/glossary#subcomponent", "fragment": "#subcomponent"}, ".  "], "extent": [16441, 16597]}], "container": true, "attrs": {"id": "group"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" HoudiniLayerInfo Primitive"], "role": "item", "extent": [16597, 16628], "body": [{"type": "para", "indent": 4, "text": ["LOP stages store additional Houdini-specific metadata that is used during the save process of a USD ROP, or by the cook methods of certain LOP nodes. This metadata is stored on a dedicate USD primitive at ", {"type": "code", "text": ["/HoudiniLayerInfo"]}, " in the scene graph, which is a custom USD primitive type called 'HoudiniLayerInfo'. It is not required for any external tools to know about this special primitive type because this primitive is removed during the save process (unless you explicitly request that the save process preserve Houdini specific custom data, which is generally only useful for low level debugging of LOP Network behaviour)."], "extent": [16668, 17298]}], "container": true, "attrs": {"id": "HoudiniLayerInfoPrimitive"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Hydra"], "role": "item", "extent": [17298, 17308], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Hydra", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Hydra is the mechanism used to draw the USD stage to the viewport.  The plugin to which hydra passes the information to be rendered is called the render delegate.  Houdini ships with an OpenGL delegate, the example Embree delegate, and of course ", {"scheme": null, "value": "#karma", "type": "link", "text": ["Karma"], "fullpath": "/solaris/glossary#karma", "fragment": "#karma"}, ". "], "extent": [17377, 17650]}], "container": true, "attrs": {"id": "hydra"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Implicit Layers"], "role": "item", "extent": [17650, 17670], "body": [{"type": "para", "indent": 4, "text": ["Implicit layers are layers created in memory by the LOP Network which may be flattened into other explicit layers (also created by the LOP Network), and thus disappear as independent entities during the save process (though any opinions they express are preserved by the flattening). "], "extent": [17695, 17985]}, {"type": "para", "indent": 3, "text": ["This includes the layers created by LOP nodes with the debug flag set, or the new layer started automatically by a Merge LOP in Separate Layers mode."], "extent": [17985, 18139]}, {"type": "para", "indent": 3, "text": ["See ", {"scheme": null, "value": "#explicitLayers", "type": "link", "text": ["Explicit Layers"], "fullpath": "/solaris/glossary#explicitLayers", "fragment": "#explicitLayers"}, "."], "extent": [18139, 18191]}], "container": true, "attrs": {"id": "implicitlayers"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Inactive"], "role": "item", "extent": [18191, 18204], "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "#active", "type": "link", "text": ["active/inactive"], "fullpath": "/solaris/glossary#active", "fragment": "#active"}, "."], "extent": [18223, 18259]}], "container": true, "attrs": {"id": "inactive"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Index"], "role": "item", "extent": [18259, 18269], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Index", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "index"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Inherits"], "role": "item", "extent": [18340, 18353], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Inherits", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Inherits are similar to a local reference, but remain \u201clive\u201d through multiple levels of references.  You would generally use inherits to derive alterations on a base \u201cclass\u201d asset like a tree or material. "], "extent": [18428, 18639]}], "container": true, "attrs": {"id": "inherits"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Instanceable"], "role": "item", "extent": [18639, 18656], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Instanceable", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "instanceable"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Instancing"], "role": "item", "extent": [18741, 18756], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Instancing", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["USD provides instancing in two forms:"], "extent": [18835, 18878]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Native instancing is a property that tells USD to generate a single \u201cmaster primitive\u201d in order to efficiently represent many copies of an asset. "], "extent": [18878, 19031]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Point Instancer is a special schema that allows for representing vast copies of geometry efficiently. "], "extent": [19031, 19141]}], "container": true}, {"type": "para", "indent": 4, "text": ["Both types of instances support transforming the top-level of each primitive and they also allow you to author primvars (on the native instance individually, or on the point instancer primitive) to set per-instance material properties.  Native instances are actual transforms on each instance, and each instance is represented in the scene as unique namespaces. They are easily promoted from instances to hero (you just turn their \u201cinstanceable\u201d property off). "], "extent": [19141, 19608]}, {"type": "para", "indent": 4, "text": ["Point Instancers are fast, but the transforms of all instances are set as array attributes on the point instancer primitive.  Promotion involves mutating the scene. Point instances should be preferred mostly based on the number of instances that will exist."], "extent": [19608, 19871]}], "container": true, "attrs": {"id": "instancing"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Interpolation"], "role": "item", "extent": [19871, 19889], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Interpolation", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "interpolation"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" IsA Schema"], "role": "item", "extent": [19976, 19991], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-IsASchema", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "isaschema"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Karma"], "role": "item", "extent": [20070, 20080], "body": [{"type": "para", "indent": 4, "text": ["Karma is the new CPU-based renderer used in LOPS.  It ingests USD and is designed to work with the Hydra API; we will continue to ship Mantra for rendering legacy files but all new development is on Karma.  "], "extent": [20096, 20309]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#delegate", "type": "link", "text": ["delegate"], "fullpath": "/solaris/glossary#delegate", "fragment": "#delegate"}, "."], "extent": [20309, 20345]}], "container": true, "attrs": {"id": "karma"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Kind"], "role": "item", "extent": [20345, 20354], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Kind", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["We use kind to classify prims in USD into a higher-level categorization than the prim\u2019s schema type provides, principly to assign roles according to USD\u2019s organizational notion of ", {"type": "q", "text": ["Model Hierarchy"]}, ". See the section on ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, " for more information."], "extent": [20421, 20689]}], "container": true, "attrs": {"id": "kind"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Layer"], "role": "item", "extent": [20689, 20699], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Layer", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A layer is either an indiviual usd/usda/usdc file on disk, or may be created in memory by LOP nodes, to be written to disk later.  It is not unusual to have hundreds or thousands of layers in a scene.  They are composed together to present the user with a complete view of the scenegraph."], "extent": [20767, 21064]}, {"type": "para", "indent": 4, "text": ["For example, the contributions of the modelling department could be one or more layers containing a model or models.  Each prop/character/asset is likely to have its own layer, and even possibly several layers per asset. The layout department would create layers that reference those individual assets and assemble them into a scene.  The contribution of the animation department would be the animation of some or all of those layers.  "], "extent": [21064, 21506]}, {"type": "para", "indent": 4, "text": ["Layers contain opinions about the prims in the scene graph. Some of these opinions define prims and values, while others overlay values. Layers are read in from files on disk, and can\n    also exist purely in-memory (known as \u201canonymous\u201d layers)."], "extent": [21506, 21758]}, {"type": "para", "indent": 4, "text": ["You can ", {"scheme": null, "value": "#muting", "type": "link", "text": ["mute"], "fullpath": "/solaris/glossary#muting", "fragment": "#muting"}, " a layer or sublayer which causes it to not affect the scene.  This is useful when a layer breaks something or slows down playback or interactivity.  "], "extent": [21758, 21936]}, {"type": "para", "indent": 4, "text": ["In LOPS, you would use a ''Configure Layer LOP'' to set a layer\u2019s properties and a ''Configure Stage LOP'' to set layer muting and population masks for the scene. "], "extent": [21936, 22105]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#implicitlayers", "type": "link", "text": ["Implicit Layers"], "fullpath": "/solaris/glossary#implicitlayers", "fragment": "#implicitlayers"}, ". "], "extent": [22105, 22155]}], "container": true, "attrs": {"id": "layer"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Layer Offset"], "role": "item", "extent": [22155, 22172], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-LayerOffset", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "layeroffset"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" LayerStack"], "role": "item", "extent": [22255, 22270], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-LayerStack", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["LayerStacks are the keystone to understanding composition in USD.  The definition of a LayerStack is simply: ", {"type": "q", "text": ["The ordered set of layers resulting from the recursive gathering of all SubLayers of a Layer, plus the layer itself as first and strongest."]}], "extent": [22349, 22605]}, {"type": "para", "indent": 4, "text": ["The LayerStack is important to understanding composition for two reasons:"], "extent": [22605, 22684]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Composition Arcs target LayerStacks, not Layers.  When a layer references (or ", {"scheme": null, "value": "#payload", "type": "link", "text": ["payloads"], "fullpath": "/solaris/glossary#payload", "fragment": "#payload"}, " or sub-layers) another layer, it is targeting (and therefore composing) not just the data in the single layer, but all the data (in strength-order) in the LayerStack rooted at the targeted layer."], "extent": [22684, 22984]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["LayerStacks provide the container through which references can be list-edited.  Many of the composition arcs (as well as relationships) describe not just a single target, but an orderable list of targets, that will be processed (in order) according to the type of the arc.  References can be ", {"type": "q", "text": ["list edited"]}, " among the layers of a LayerStack. This can be a powerful method of non-destructively changing the large-scale structure of a scene as it flows down the pipeline."], "extent": [22984, 23459]}], "container": true}, {"type": "para", "indent": 4, "text": ["For example, we might have a generic version of a special effect added into a scene at the sequence level.  Now, at the shot-level, we have a shotFX.usd layer.  In this particular shot, we need to replace the generic turbulence effect with a different one, which may have completely different prims in it.  Therefore it is not enough to just ", {"type": "q", "text": ["add on"]}, " an extra reference, because the prims from turbulence.usd will still ", {"type": "q", "text": ["shine through"]}, " - we must also remove the weaker reference, which we can do via ", {"scheme": null, "value": "#listediting", "type": "link", "text": ["list editing"], "fullpath": "/solaris/glossary#listediting", "fragment": "#listediting"}, "."], "extent": [23459, 23993]}, {"type": "para", "indent": 4, "text": ["Contributions to a shot, such as the character animation or camera, would generally be ", {"scheme": null, "value": "#sublayers", "type": "link", "text": ["sublayers"], "fullpath": "/solaris/glossary#sublayers", "fragment": "#sublayers"}, ". "], "extent": [23993, 24110]}], "container": true, "attrs": {"id": "layerstack"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Leaf"], "role": "item", "extent": [24110, 24119], "body": [{"type": "para", "indent": 4, "text": ["The term \u201cleaf\u201d is not a USD concept, but a general concept meaning the part of a branching structure with no children.  In a file tree, the final file in a nested list of directories and files is a leaf type. "], "extent": [24135, 24356]}], "container": true, "attrs": {"id": "leaf"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" List Editing"], "role": "item", "extent": [24356, 24373], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-ListEditing", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "listediting"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" LIVRPS Strength Ordering"], "role": "item", "extent": [24456, 24485], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-LIVRPSStrengthOrdering", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "livrps"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Load / Unload"], "role": "item", "extent": [24574, 24592], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Load/Unload", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "loadunload"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Localize"], "role": "item", "extent": [24674, 24687], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Localize", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "localize"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Locked Stage"], "role": "item", "extent": [24763, 24780], "body": [{"type": "para", "indent": 4, "text": ["When the output of a LOP node is accessed through the second or layer input of a ", {"scheme": null, "value": "#sublayers", "type": "link", "text": ["Sublayer LOP"], "fullpath": "/solaris/glossary#sublayers", "fragment": "#sublayers"}, " or a ", {"scheme": null, "value": "#references", "type": "link", "text": ["Reference LOP"], "fullpath": "/solaris/glossary#references", "fragment": "#references"}, ", or when the composed stage of a LOP node is accessed by a LOP Import SOP, the composed stage generated by that LOP node needs to be locked.  A locked stage is a copy of the LOP node\u2019s shared stage, but with the contents of the active layer copied to the root layer of the stage.  A locked stage is guaranteed not to change, and like a file on disk, cannot be modified by other LOP nodes further down the cook chain."], "extent": [24806, 25369]}], "container": true, "attrs": {"id": "lockedstage"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" LOPS"], "role": "item", "extent": [25369, 25378], "body": [{"type": "para", "indent": 4, "text": ["Houdini\u2019s lighting and look development context is LOPs, which stands for Lighting Operators. LOP Networks are similar to SOPs, however instead of using Houdini\u2019s geometry model, LOPs uses USD scene description. "], "extent": [25393, 25611]}], "container": true, "attrs": {"id": "lops"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" LOP Stage / Shared Stage"], "role": "item", "extent": [25611, 25640], "body": [{"type": "para", "indent": 4, "text": ["Every LOP node can generate a composed USD stage. But the underlying USD stage may be shared between several LOP nodes in a chain, for performance and scalability reasons. So when referring to the composed stage generated by a LOP node it may be referred to as either the LOP Stage or the Shared Stage, depending on whether or not it is relevant that the stage may be shared. But both terms refer to the same thing."], "extent": [25663, 26084]}], "container": true, "attrs": {"id": "lopstage"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Metadata"], "role": "item", "extent": [26084, 26097], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Metadata", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "metadata"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Model"], "role": "item", "extent": [26174, 26184], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Model", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["In USD, ", {"type": "q", "text": ["model"]}, " is neither a singular component nor a plural group container - it is just the ", {"type": "q", "text": ["abstract"]}, " commonality between components and groups. "], "extent": [26253, 26407]}, {"type": "para", "indent": 4, "text": ["We label certain prims as models to partition large scenegraphs into more manageable pieces:"], "extent": [26407, 26504]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["a core ", {"type": "q", "text": ["leaf model"]}, " kind:  ", {"scheme": null, "value": "#component", "type": "link", "text": ["component"], "fullpath": "/solaris/glossary#component", "fragment": "#component"}], "extent": [26504, 26560]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["models that aggregate other models"]}, ":  ", {"scheme": null, "value": "#group", "type": "link", "text": ["group"], "fullpath": "/solaris/glossary#group", "fragment": "#group"}], "extent": [26560, 26620]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["models that aggregate other models"]}, ":  ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}], "extent": [26620, 26687]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [26687, 26697], "body": [{"type": "para", "indent": 12, "text": ["Do not think of USD ", {"type": "q", "text": ["models"]}, " in the traditional Computer Graphic sense.  A USD ", {"type": "q", "text": ["model"]}, " is an abstract concept that is used partition large scenegraphs into more manageable pieces."], "extent": [26697, 26890]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "model"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Model Hierarchy"], "role": "item", "extent": [26890, 26910], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-ModelHierarchy", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "modelhierarchy"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Muting (Layer Muting)"], "role": "item", "extent": [26999, 27025], "body": [{"type": "para", "indent": 4, "text": ["One important characteristic of layers is they can be muted. When a layer is muted, the stage is recomposed and all opinions from the muted layer(s) are no longer affecting the scene. If a layer ends up breaking something in a shot, or has some undesirable effect, it can be muted rather than removed from a list of sublayers.  A layer does not have to be a sublayer, in order to be muted, but generally those are the ones that would end up being muted in production. "], "extent": [27042, 27516]}, {"type": "para", "indent": 4, "text": ["For example, FX might have authored at the above shot.usda layer, and shot playback is super slow.  In this case, an artist loading the shot could just mute the shotFX.usd layer, which would make USD recompose the shot, but ignore all opinions coming from the shotFX.usd layer. "], "extent": [27516, 27800]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#active", "type": "link", "text": ["active"], "fullpath": "/solaris/glossary#active", "fragment": "#active"}, "."], "extent": [27800, 27832]}], "container": true, "attrs": {"id": "muting"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Namespace"], "role": "item", "extent": [27832, 27846], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Namespace", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "namespace"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Opinions"], "role": "item", "extent": [27925, 27938], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Opinions", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Layers contain opinions about the prims in the scene graph. Some of these opinions define prims and values, while others overlay values. "], "extent": [28013, 28156]}, {"type": "para", "indent": 4, "text": ["Opinions are the atomic elements that participate in Value Resolution in USD.  Each time you author a value for a Metadatum, Attribute, or Relationship, you are expressing an opinion for that object in a PrimSpec in a particular Layer.  On a composed Stage, any object may be affected by multiple opinions from different layers."], "extent": [28156, 28490]}, {"type": "para", "indent": 4, "text": ["Here is an example:  We have a ball that is authored by the assets department.  They decide this ball is red and give this ball a diffuse color of (1,0,0).  This is the diffuse color \u201copinion.\u201d  Later, the lighter decides the ball should be blue and gives it a diffuse color of (0,0,1) in the local layer stack.  This \u201copinion\u201d is stronger as it lives in the strongest layer and the ball will be rendered as blue.  "], "extent": [28490, 28911]}, {"type": "para", "indent": 4, "text": ["There is no ", {"type": "q", "text": ["opinion"]}, " operator or LOP.  Opinions are authored using LOP nodes and the opinions are parsed by USD to determine the composition of a stage.  "], "extent": [28911, 29072]}], "container": true, "attrs": {"id": "opinions"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Over"], "role": "item", "extent": [29072, 29081], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Over", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "over"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Path"], "role": "item", "extent": [29150, 29159], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Path", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["In USD ascii syntax (and documentation), paths are enclosed in angle-brackets.  For example:"], "extent": [29226, 29324]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["</Root/Child/Grandchild>"]}, " represents an absolute prim path of three nested prims"], "extent": [29324, 29412]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["</Root/Child/Grandchild.visibility>"]}, " names the property ", {"type": "q", "text": ["visibility"]}, " on the prim Grandchild"], "extent": [29412, 29511]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["</Root/Child/Grandchild{modelingVariant=withCargoRack}/GreatGrandchild>"]}, " represents the child prim ", {"type": "q", "text": ["GreatGrandchild"]}, " authored inside the Variant ", {"type": "q", "text": ["withCargoRack"]}, " of VariantSet ", {"type": "q", "text": ["modelingVariant"]}], "extent": [29511, 29713]}], "container": true}], "container": true, "attrs": {"id": "path"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Payload"], "role": "item", "extent": [29713, 29725], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Payload", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A payload is a special kind of ", {"scheme": null, "value": "#reference", "type": "link", "text": ["reference"], "fullpath": "/solaris/glossary#reference", "fragment": "#reference"}, ", but can be unloaded for optimization.  Most heavy parts of assets (i.e. geometry) are generally behind a payload within an asset for this reason. Payloads are weaker than references.  When files are combined with payloads it is easy to control which parts of a scene are loaded into memory, keeping memory use and processing time down by letting you load and focus on only those parts of a scene in which you are interested."], "extent": [29798, 30283]}, {"type": "para", "indent": 4, "text": ["By default Houdini loads all payloads (and so they behave exactly like references). But the Configure Stage LOP and the Load Masks controls in the scene graph tree allow you to disable default loading of payloads, and then choose which specific payloads you want to load."], "extent": [30283, 30561]}], "container": true, "attrs": {"id": "payload"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Path Translation"], "role": "item", "extent": [30561, 30582], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PathTranslation", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "pathtranslation"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Point Instancers"], "role": "item", "extent": [30673, 30694], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PointInstancers", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["USD comes with its own point instancer model, this is extremely powerful and can be used for instancing geometry, volumes, other hierarchies, even instancing other point instancers. "], "extent": [30783, 30971]}, {"type": "para", "indent": 4, "text": ["The Point Instancer schema is designed to draw vast amounts of geometry as fast as possible. It was designed and implemented primarily for FX artists, who are often required to simulate and animate lots of debris. The Point Instancer LOP uses Houdini\u2019s standard instance attributes on points to adjust the transform of each instance. "], "extent": [30971, 31311]}, {"type": "para", "indent": 4, "text": ["Each model instanced across the points is called a ''prototype'', and Point Instancer prims can assign any number of prototypes. If the per-instance variations cannot be expressed via the Point Instancer primitive\u2019s attributes, then different prototypes may have to be used. Prototypes can contain animated geometry, and Point Instancer prims can be prototypes for other Point Instancers. "], "extent": [31311, 31706]}, {"type": "para", "indent": 4, "text": ["The downside is Point Instancers are much less flexible for the pipeline to work around. Parenting to individual Point Instancer instances requires extra work, and any changes to individual instances is limited to the attributes available from the schema. Also, although one can use any number of unique prototypes, too many prototypes can offset the performance advantages that come from using Point Instancers. "], "extent": [31706, 32125]}, {"type": "para", "indent": 4, "text": ["LOPs provides a few LOPs for conveniently working with Point Instancers and Native Instances: "], "extent": [32125, 32224]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Instance Variation - randomize different properties of instances using VEX snippets "], "extent": [32224, 32315]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Instance Retime - change the time of prototypes "], "extent": [32315, 32370]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Instance Extract - extract and promote instances "], "extent": [32370, 32426]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Instance Transform - for hand-editing individual instances "], "extent": [32426, 32493]}], "container": true}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#instancing", "type": "link", "text": ["\u201cInstancing\u201d"], "fullpath": "/solaris/glossary#instancing", "fragment": "#instancing"}, "."], "extent": [32493, 32535]}], "container": true, "attrs": {"id": "pointinstancers"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Post-Layers"], "role": "item", "extent": [32535, 32551], "body": [{"type": "para", "indent": 4, "text": ["Each LOP Network allows modifications to its session layer using python scripting. These modifications are applied after cooking the LOP node to be displayed in the viewport or Scene Graph Tree. These modifications can also be written to the output file of a USD ROP, and affect the rendered image from a USD Render ROP. See ", {"scheme": "Hom", "value": "/hom/hou/LopPostLayer", "type": "link", "text": "", "fallback_text": "hou.LopPostLayer", "fullpath": "/hom/hou/LopPostLayer"}, " for more information."], "extent": [32572, 32947]}], "container": true, "attrs": {"id": "postlayers"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Prim"], "role": "item", "extent": [32947, 32956], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Prim", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A Prim is the primary container object in USD."], "extent": [33023, 33075]}, {"type": "para", "indent": 4, "text": ["A Prim can be of several types (USD calls these types, ", {"scheme": null, "value": "#schema", "type": "link", "text": ["\u201cschemas\u201d"], "fullpath": "/solaris/glossary#schema", "fragment": "#schema"}, "), such as Meshes, Lights, Cameras, Shaders, and so on. Each schema defines all of the properties that each prim type supports. "], "extent": [33075, 33283]}, {"type": "para", "indent": 4, "text": ["Prims can contain other prims, creating a ", {"type": "q", "text": ["namespace hierarchy"]}, " on a Stage, and prims can also contain properties that hold meaningful data.  Prims, along with their associated, computed indices, are the only persistent scenegraph objects that a Stage retains in memory, and the API for interacting with prims is provided by the UsdPrimclass.  "], "extent": [33283, 33633]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [33633, 33643], "body": [{"type": "para", "indent": 12, "text": ["HOUDINI NOTE:  From the description above, it is obvious that a USD \u201cprim\u201d is not equivalent to a Houdini \u201cprimitive\u201d.  In Houdini a primitive is the simplest thing that can be rendered, (with the caveat that in Houdini points are renderable but are not primitives).  For example, this could be a single polygon in a sphere, a single line, or even a \"primitive sphere.\u201d"], "extent": [33643, 34026]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "prim"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" PrimSpec"], "role": "item", "extent": [34026, 34039], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PrimSpec", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "primspec"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" PrimStack"], "role": "item", "extent": [34116, 34130], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PrimStack", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "primstack"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Primvar"], "role": "item", "extent": [34209, 34221], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Primvar", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["The name primvar comes from Renderman, and stands for ", {"type": "q", "text": ["primitive variable"]}, ".  In Houdini-speak, ", {"type": "strong", "text": ["a primvar is equivalent to geometry attribute"]}, ".  Like geometry attributes, primvars can be per-point, per-primitive, per-vertex, etc. Of course, different interpolations have different names in Houdini and USD."], "extent": [34294, 34606]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Houdini "], "role": "th", "extent": [34606, 34621], "container": true}, {"type": "cell", "indent": 8, "text": ["USD "], "role": "th", "extent": [34621, 34637]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Point Attribute "], "role": "td", "extent": [34637, 34672], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["USD primvar with vertex interpolation "], "extent": [34672, 34773]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Vertex Attribute"], "role": "td", "extent": [34773, 34795], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["USD primvar with face-varying interpolation"], "extent": [34795, 34873]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Primitive Attribute"], "role": "td", "extent": [34873, 34898], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["USD primvar with uniform interpolation"], "extent": [34898, 34971]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Detail Attribute"], "role": "td", "extent": [34971, 34993], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["USD primvar with constant interpolation"], "extent": [34993, 35046]}]}], "divider": false}]}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["There are two key aspects of Primvar identity:"]}], "extent": [35046, 35099]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Primvars define a value that can vary across the primitive on which they are defined, via prescribed interpolation rules, (just like attributes in Houdini)."], "extent": [35099, 35262]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Taken collectively on a prim, its Primvars describe the ", {"type": "q", "text": ["per-primitive overrides"]}, " to the shader(s) to which the prim is bound, (again, just like in Houdini)."], "extent": [35262, 35427]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [35427, 35437], "body": [{"type": "para", "indent": 12, "text": ["HOUDINI NOTE:  Just to reiterate that a primvar is equivalent to a geometry attribute.  "], "extent": [35437, 35539]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "primvar"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Property"], "role": "item", "extent": [35539, 35552], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Property", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Properties are the other kind of namespace object in USD (Prims being the first).  Whereas prims provide the organization and indexing for a composed scene, properties contain the ", {"type": "q", "text": ["real data"]}, ".  "], "extent": [35627, 35827]}, {"type": "para", "indent": 4, "text": ["Properties of a prim can be either Attributes or Relationship."], "extent": [35827, 35895]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#relationship", "type": "link", "text": ["\u201crelationship\u201d"], "fullpath": "/solaris/glossary#relationship", "fragment": "#relationship"}, " and ", {"scheme": null, "value": "#attribute", "type": "link", "text": ["\u201cattribute\u201d"], "fullpath": "/solaris/glossary#attribute", "fragment": "#attribute"}, "."], "extent": [35895, 35970]}], "container": true, "attrs": {"id": "property"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" PropertySpec"], "role": "item", "extent": [35970, 35987], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PropertySpec", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "propertyspec"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" PropertyStack"], "role": "item", "extent": [36072, 36090], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PropertyStack", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "propertystack"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Prototype"], "role": "item", "extent": [36177, 36191], "body": [{"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#pointinstancers", "type": "link", "text": ["\u201cPoint Instancers\u201d"], "fullpath": "/solaris/glossary#pointinstancers", "fragment": "#pointinstancers"}, "."], "extent": [36211, 36264]}], "container": true, "attrs": {"id": "prototype"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Proxy"], "role": "item", "extent": [36264, 36274], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Proxy", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "proxy"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" PseudoRoot"], "role": "item", "extent": [36345, 36360], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-PseudoRoot", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "pseudoroot"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Purpose"], "role": "item", "extent": [36441, 36453], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Purpose", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "purpose"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" References"], "role": "item", "extent": [36528, 36543], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Reference", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A Reference is one of the most common composition arcs, and is generally used to compose assets and props into a stage, (such as assets into a set). Unlike SubLayers, References are composed into a specified prim path (namespace) in the scenegraph. "], "extent": [36621, 36876]}, {"type": "para", "indent": 4, "text": ["The primary use for References is to compose smaller units of scene description into larger aggregates, building up a namespace that includes the ", {"type": "q", "text": ["encapsulated"]}, " result of composing the scene description targeted by a reference. "], "extent": [36876, 37110]}, {"type": "para", "indent": 4, "text": ["While references may give the appearance of instancing, they are not actually instanced. A prim can be declared instanceable, and USD will then optimize and share those prims among each instance. However instance-references cannot have unique overrides to prims below the instance root. "], "extent": [37110, 37403]}, {"type": "para", "indent": 4, "text": ["Think of references as a sort of \u201cmacro\u201d to compactly reuse scene description. References would be used to assemble a shelf of books; the bookshelf and the books would references the shelf and book assets respectively. "], "extent": [37403, 37628]}, {"type": "para", "indent": 4, "text": ["Referencing is the only way to load the same layer file multiple times into a single scene graph in different locations. No matter how many times a file is sublayered into a scene graph, the result is the same as adding it as a sublayer once (though it is actually not permitted to sublayer the same file multiple times). But a file may be referenced many times into many different scene graph locations."], "extent": [37628, 38038]}, {"type": "para", "indent": 4, "text": ["The Reference LOP and Stage Manager LOP create references. The Graft Stages and Graft Branches LOPs do something similar to referencing, but rather than creating references they actually copy the referenced scene graph data into the main scene graph. It can be thought of as a ", {"type": "q", "text": ["hardened"]}, " reference. It is also different from a reference in that it doesn\u2019t refer to a file on disk. You can only graft other scene graphs authored in LOPs."], "extent": [38038, 38480]}], "container": true, "attrs": {"id": "references"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Relationship"], "role": "item", "extent": [38480, 38497], "body": [{"type": "para", "indent": 4, "text": ["Relationships point to a primitive or property in the scene.  "], "extent": [38497, 38565]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#relationship", "type": "link", "text": ["\u201cproperty\u201d"], "fullpath": "/solaris/glossary#relationship", "fragment": "#relationship"}, "."], "extent": [38565, 38607]}], "container": true}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Root LayerStack"], "role": "item", "extent": [38607, 38627], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-RootLayerStack", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "rootlayerstack"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Schema"], "role": "item", "extent": [38716, 38727], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Schema", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Prims are organized into types defined by the Schema.  Examples of schemas are Meshes, Lights, Cameras, Shaders, and so on. Each schema defines all of the properties that each prim type supports. You can author your own schemas, but the ones that ship with USD are probably sufficient.  "], "extent": [38798, 39095]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#apischema", "type": "link", "text": [{"type": "q", "text": ["API schema"]}], "fullpath": "/solaris/glossary#apischema", "fragment": "#apischema"}, "."], "extent": [39095, 39136]}], "container": true, "attrs": {"id": "schema"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Session Layer"], "role": "item", "extent": [39136, 39154], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-SessionLayer", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Most USD authoring applications (outside of LOPS) work on a session layer.  This is a kind of \u201cscratch space\u201d to configure, override, and experiment with the data contained in files backing the stage.  "], "extent": [39237, 39445]}, {"type": "para", "indent": 4, "text": ["In contrast, LOPs always operate on the strongest layer on the stage. When you load a layer from disk (whether by reference or sublayer), the LOP which loaded it will have a stronger layer above the layers loaded from disk. Each subsequent LOP will then operate on this strongest layer, until a new layer is declared in the node graph. "], "extent": [39445, 39787]}, {"type": "para", "indent": 4, "text": ["There is a session layer and stage used for the Scene Viewer, but the only edits that currently end up there are activation/visibility opinions set via the Scene Graph Tree. "], "extent": [39787, 39967]}], "container": true, "attrs": {"id": "sessionlayer"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Specializes"], "role": "item", "extent": [39967, 39983], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Specializes", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Similar to inherits, but is intended to allow for specializations of a base primitive to be refined. "], "extent": [40064, 40172]}], "container": true, "attrs": {"id": "specializes"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Specifier"], "role": "item", "extent": [40172, 40186], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Specifier", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "specifier"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Stage"], "role": "item", "extent": [40265, 40275], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Stage", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A scene in USD is called a stage, and rather than simply load a file, USD composes the stage.  In Houdini, this would typically be called a \u201cscene.\u201d  "], "extent": [40344, 40500]}, {"type": "para", "indent": 4, "text": ["Only on rare occasions is the entire stage stored in a single, flat file. Usually there are at least a few layers (each .usd/.usda/.usdc file on disk), and they are composed together to present the user with a complete view of the scenegraph. The composed stage is a hierarchy of ", {"scheme": null, "value": "#prim", "type": "link", "text": ["prims"], "fullpath": "/solaris/glossary#prim", "fragment": "#prim"}, " , representing all of the models, characters, props, etc.  "], "extent": [40500, 40860]}], "container": true, "attrs": {"id": "stage"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Stage Manager"], "role": "item", "extent": [40860, 40878], "body": [{"type": "para", "indent": 4, "text": ["A very interesting utility LOP, designed to be a one-stop location for referencing assets from disk, transforming them in 3d space, and adjusting your scene hierarchy.  It has a custom Qt interface and Python State, to take care of the UX part, but the node itself is capable of creating, moving, copying, and deleting primitives.  "], "extent": [40901, 41243]}, {"type": "para", "indent": 4, "text": ["The Stage Manager will flatten layers on its input into a single layer so that it can perform these operations on any input. However using this facility will combine all the layers in the layer stack, which is not something to be done lightly."], "extent": [41243, 41493]}], "container": true, "attrs": {"id": "stagemanager"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Stage Traversal"], "role": "item", "extent": [41493, 41513], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-StageTraversal", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "stagetraversal"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Subcomponent"], "role": "item", "extent": [41603, 41620], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Subcomponent", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Subcomponents provide a way of setting up levels of organizational complexity within component models, providing intermediate interfaces/views of a model\u2019s organization that sit in-between ", {"type": "q", "text": ["just show me a single prim for the entire model"]}, " and ", {"type": "q", "text": ["expand all hierarchy down to leaf prims"]}, "."], "extent": [41703, 41994]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, " for an explanation of ", {"scheme": null, "value": "#assembly", "type": "link", "text": ["assembly"], "fullpath": "/solaris/glossary#assembly", "fragment": "#assembly"}, ", ", {"scheme": null, "value": "#group", "type": "link", "text": ["group"], "fullpath": "/solaris/glossary#group", "fragment": "#group"}, ", ", {"scheme": null, "value": "#component", "type": "link", "text": ["component"], "fullpath": "/solaris/glossary#component", "fragment": "#component"}, " and ", {"scheme": null, "value": "#subcomponent", "type": "link", "text": ["sub component"], "fullpath": "/solaris/glossary#subcomponent", "fragment": "#subcomponent"}, ".  "], "extent": [41994, 42149]}], "container": true, "attrs": {"id": "subcomponent"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Sublayers"], "role": "item", "extent": [42149, 42163], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Sublayers", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Layers can have multiple sublayers, which are ordered strongest to weakest.  This list of layers and SubLayers is called a LayerStack.  "], "extent": [42240, 42387]}], "container": true, "attrs": {"id": "sublayers"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Target Patterns"], "role": "item", "extent": [42387, 42407], "body": [{"type": "para", "indent": 4, "text": ["When writing syntax to act on particular ", {"scheme": null, "value": "#prims", "type": "link", "text": ["prims"], "fullpath": "/solaris/glossary#prims", "fragment": "#prims"}, " in LOPs, you will need to identify them.  The most direct way to target one or more prims, is to manually enter their paths.  Please see the ", {"scheme": null, "value": "intro#primitivepatterns", "type": "link", "text": ["LOPs Intro"], "fullpath": "/solaris/intro#primitivepatterns", "fragment": "#primitivepatterns"}, " for more detail on pattern matching."], "extent": [42432, 42708]}], "container": true, "attrs": {"id": "targetpatterns"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" TimeCode"], "role": "item", "extent": [42708, 42721], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Timecode", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "timecode"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" TimeSample"], "role": "item", "extent": [42798, 42813], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-TimeSample", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "timesample"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Type"], "role": "item", "extent": [42894, 42903], "body": [{"type": "para", "indent": 4, "text": ["When people refer to \u201ctypes\u201d of data, they are probably referring to USD ", {"scheme": null, "value": "#schema", "type": "link", "text": ["Schema"], "fullpath": "/solaris/glossary#schema", "fragment": "#schema"}, ".  USD does have ", {"type": "q", "text": ["primitive types"]}, ", which are defined by primitive schemas. "], "extent": [42918, 43089]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#schema", "type": "link", "text": ["schema"], "fullpath": "/solaris/glossary#schema", "fragment": "#schema"}, ".  "], "extent": [43089, 43123]}], "container": true, "attrs": {"id": "type"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Typed Schema"], "role": "item", "extent": [43123, 43140], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-TypeSchema", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "typeschema"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" USD"], "role": "item", "extent": [43220, 43228], "body": [{"type": "para", "indent": 4, "text": ["Universal Scene Description is an open source scene description for efficiently building and collaborating on 3D assets and scenes. It is a file format which describes a Scene Graph.  In Houdini it is implemented in ", {"scheme": null, "value": "#lops", "type": "link", "text": ["LOPS"], "fullpath": "/solaris/glossary#lops", "fragment": "#lops"}, ".  Using USD via LOPS allows multiple users/departments to work on the same scene non-destructively.  It provides not only a framework for a studio\u2019s pipeline, but the actual infrastructure to provide fast and efficient ways of building, presenting, inspecting, and editing a ", {"scheme": null, "value": "#stage", "type": "link", "text": ["stage"], "fullpath": "/solaris/glossary#stage", "fragment": "#stage"}, " (scene).  USD works in layers which can be composited, much like layers in an application like Photoshop."], "extent": [43242, 43872]}], "container": true, "attrs": {"id": "usd"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" usdview"], "role": "item", "extent": [43872, 43884], "body": [{"type": "para", "indent": 4, "text": ["Not a USD concept but a very useful tool for inspecting USD files.  This is a ", {"scheme": null, "value": "linktodocs", "type": "link", "text": ["standalone tool"], "fullpath": "/solaris/linktodocs"}, " from the open source USD library.  "], "extent": [43902, 44050]}, {"type": "para", "indent": 4, "text": ["You can use it to visually inspect your stage with the Hydra viewport, playback animation, inspect properties and metadata, even switch variants or prototypes and debug scenes."], "extent": [44050, 44232]}], "container": true, "attrs": {"id": "usdview"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" User Properties"], "role": "item", "extent": [44232, 44252], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-UserProperties", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "userproperties"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Value Clips"], "role": "item", "extent": [44341, 44357], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-ValueClips", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "valueclips"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Value Resolution"], "role": "item", "extent": [44438, 44459], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-ValueResolution", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Value Resolution is the algorithm by which final values for properties or metadata are ", {"type": "q", "text": ["composed"]}, " from all of the various opinions.  Value resolution is the act of composing potentially many pieces of data together to produce a single value."], "extent": [44548, 44795]}, {"type": "para", "indent": 4, "text": ["This is a complex topic, so please consult the ", {"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-ValueResolution", "type": "link", "text": ["Value Resolution USD docs"], "exists": true}, " for more information.  "], "extent": [44795, 44981]}], "container": true, "attrs": {"id": "valueresolution"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Variability"], "role": "item", "extent": [44981, 44997], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Variability", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}], "container": true, "attrs": {"id": "variability"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Variant"], "role": "item", "extent": [45079, 45091], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Varient", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A variant represents a single, named variation of a VariantSet.  "], "extent": [45164, 45235]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#variantset", "type": "link", "text": ["VariantSet"], "fullpath": "/solaris/glossary#variantset", "fragment": "#variantset"}, "."], "extent": [45235, 45276]}], "container": true, "attrs": {"id": "variant"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Variant Set"], "role": "item", "extent": [45276, 45292], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-VarientSet", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["A VariantSet contains individual variants from which a user (or process) can choose.  For example, you might have a \u201ctree\u201d VariantSet and inside have ten different trees, (variants).  The user can then choose which tree he or she wishes to use."], "extent": [45371, 45621]}, {"type": "para", "indent": 4, "text": ["In Houdini, you might think of this as a digital asset which contains various read nodes of different trees piped into a switch SOP with the switch control promoted up.  "], "extent": [45621, 45797]}, {"type": "para", "indent": 4, "text": ["Variants aren\u2019t restricted in what they can store, a VariantSet might simply swap materials, or it can change the entire hierarchy (see ", {"scheme": null, "value": "#variantlayer", "type": "link", "text": ["\"Variant Layer"], "fullpath": "/solaris/glossary#variantlayer", "fragment": "#variantlayer"}, "\u201d). VariantSets don\u2019t have to be defined on the asset, they can be introduced by downstream contributors. "], "extent": [45797, 46075]}, {"type": "para", "indent": 4, "text": ["Variants work without changing namespaces (thus preserving things like light-linking or transforms on each instance of a book in a scene), down to the prim that owns the variant set.  "], "extent": [46075, 46268]}], "container": true, "attrs": {"id": "variantset"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Viewport Load Masks"], "role": "item", "extent": [46268, 46292], "body": [{"type": "para", "indent": 4, "text": ["The viewport stage allows for the configuration of various USD methods for controlling the loading of data. This provides the ability to choose which parts of a very large scene to actually load and display in the viewport. These various capabilities are jointly referred to in LOPs as the ", {"type": "q", "text": ["Load Masks"]}, ". The load masks encapsulate the ability to selectively load payloads, to set the stage population mask, and to mute layers. See the USD documentation for descriptions of each of these features."], "extent": [46324, 46826]}], "container": true, "attrs": {"id": "viewportloadmasks"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Viewport Overrides"], "role": "item", "extent": [46826, 46849], "body": [{"type": "para", "indent": 4, "text": ["The viewport stage provides the ability to make modifications to its session layer in order to set opinions on USD primitive aspects such as activation, visibility, and draw mode.  Being in the session layer, these opinions are stronger than anything coming from the root layer or its sublayers. These overrides are primarily controlled through the Scene Graph Tree pane, but can also be modified with python scripts."], "extent": [46881, 47304]}], "container": true, "attrs": {"id": "viewportoverrides"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Viewport Stage"], "role": "item", "extent": [47304, 47323], "body": [{"type": "para", "indent": 4, "text": ["Each LOP viewer has its own stage, which is what is actually displayed in the viewport. This stage is generated as a copy of the LOP Stage of the node with the display flag set on it. See the section on Performance Considerations for an explanation of why the viewer has its own stage."], "extent": [47351, 47642]}], "container": true, "attrs": {"id": "viewportstage"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Visibility"], "role": "item", "extent": [47642, 47657], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Visibility", "type": "link", "text": ["Original OpenUSD definition"], "exists": true}], "extent": [43, 141]}, {"type": "para", "indent": 4, "text": ["Visibility and activation are similar concepts.  Visibility (like activation) affects child prims.  That is, you can\u2019t make a child of an invisible prim visible (or a child of an inactive prim active)."], "extent": [47736, 47943]}, {"type": "para", "indent": 4, "text": ["In LOPS, use a ''Configure Primitives LOP'' or ''Prune LOP'' to set visibility.  "], "extent": [47943, 48030]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": null, "value": "#active", "type": "link", "text": ["active"], "fullpath": "/solaris/glossary#active", "fragment": "#active"}, " and ", {"scheme": null, "value": "#muting", "type": "link", "text": ["muting"], "fullpath": "/solaris/glossary#muting", "fragment": "#muting"}, "."], "extent": [48030, 48083]}], "container": true, "attrs": {"id": "visibility"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" VEX"], "role": "item", "extent": [48083, 48091], "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "vex", "type": "link", "text": "", "fullpath": "/solaris/vex"}, "."], "extent": [48105, 48121]}], "container": true, "attrs": {"id": "vex"}}, {"ext": null, "type": "glossary_item", "indent": 0, "text": [" Volume"], "role": "item", "extent": [48121, 48132], "body": [{"type": "para", "indent": 4, "text": ["In USD, a \u201cvolume\u201d is essentially a set of named \u201cfields\u201d that are rendered together as a unit.  So a volume ", {"scheme": null, "value": "#prim", "type": "link", "text": ["prim"], "fullpath": "/solaris/glossary#prim", "fragment": "#prim"}, " ", {"type": "code", "text": ["/campsite/fire"]}, " would say that it is made up of a field named \u201cdensity\u201d found at ", {"type": "code", "text": ["/campsite/fire/density"]}, ", and a field named \u201ctemperature\u201d found at ", {"type": "code", "text": ["/campsite/fire/temp"]}, ". Each one of these fields equivalent to a singleVolume or VDB primitive in SOPs."], "extent": [48149, 48528]}], "container": true, "attrs": {"id": "volume"}}], "container": true, "role": "item_group"}], "text": "Glossary"}], "title": ["LOPs and USD Glossary"]}